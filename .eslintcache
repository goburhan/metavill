[{"C:\\Users\\90532\\Desktop\\metavill-front\\src\\index.tsx":"1","C:\\Users\\90532\\Desktop\\metavill-front\\src\\Providers.tsx":"2","C:\\Users\\90532\\Desktop\\metavill-front\\src\\App.tsx":"3","C:\\Users\\90532\\Desktop\\metavill-front\\src\\style\\Global.tsx":"4","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\PageLoader.tsx":"5","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\NotFound.tsx":"6","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\ApplyForIfos.tsx":"7","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Nft\\components\\NftGlobalNotification.tsx":"8","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\hooks.ts":"9","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\index.ts":"10","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\index.ts":"11","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\index.ts":"12","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\index.ts":"13","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getRpcUrl.ts":"14","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\index.tsx":"15","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Menu\\index.tsx":"16","C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\RefreshContext.tsx":"17","C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\BlockContext.tsx":"18","C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\ThemeContext.tsx":"19","C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\Localisation\\languageContext.tsx":"20","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\CallOption\\CallOption.tsx":"21","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\LeafContainers.tsx":"22","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Page.tsx":"23","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\Details.tsx":"24","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\index.ts":"25","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\actions.ts":"26","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\types.ts":"27","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Menu\\config.ts":"28","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\Home.tsx":"29","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\DelegateFarm.tsx":"30","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\Syrup.tsx":"31","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\Farms.tsx":"32","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useI18n.ts":"33","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\Hero.tsx":"34","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\CurrentIfo.tsx":"35","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\PastIfo.tsx":"36","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Container.tsx":"37","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useRefresh.ts":"38","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useTheme.ts":"39","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\web3.ts":"40","C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\Localisation\\translationsContext.ts":"41","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useContract.ts":"42","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\addressHelpers.ts":"43","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\translateTextHelpers.ts":"44","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\localisation\\languageCodes.ts":"45","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoTabButtons\\index.tsx":"46","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\Divider.tsx":"47","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\Divider.tsx":"48","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\PoolCard.tsx":"49","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\Divider.tsx":"50","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx":"51","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCards.tsx":"52","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\ClaimButton.tsx":"53","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\MainFooter.tsx":"54","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\FarmCard.tsx":"55","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\slideimage.tsx":"56","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Partners.tsx":"57","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Benefits.tsx":"58","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\index.ts":"59","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\index.ts":"60","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\formatBalance.ts":"61","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useBlock.ts":"62","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Flex.tsx":"63","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx":"64","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx":"65","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useTokenBalance.ts":"66","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\index.tsx":"67","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\HarvestButton.tsx":"68","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\CardFooter.tsx":"69","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\Card.tsx":"70","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx":"71","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx":"72","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx":"73","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx":"74","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\DepositModal.tsx":"75","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\CardTitle.tsx":"76","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\WithdrawModal.tsx":"77","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useAllEarnings.ts":"78","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyButton.tsx":"79","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\CardActionsContainer.tsx":"80","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchFarmUser.ts":"81","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchFarms.ts":"82","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\fetchPoolsUser.ts":"83","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\fetchPools.ts":"84","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\index.ts":"85","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\index.ts":"86","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\contracts.ts":"87","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardContribute.tsx":"88","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx":"89","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"90","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx":"91","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\steemUtils.ts":"92","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\farms.ts":"93","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\pools.ts":"94","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyCalculatorModal.tsx":"95","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\HarvestAction.tsx":"96","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\ifo.ts":"97","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\index.ts":"98","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\erc20.ts":"99","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getLiquidityUrlPathParts.ts":"100","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useApprove.ts":"101","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Tags.tsx":"102","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Balance.tsx":"103","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useStake.ts":"104","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\TokenInput\\index.ts":"105","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\multicall.ts":"106","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\UnlockButton.tsx":"107","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\ContributeModal.tsx":"108","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\LabelButton.tsx":"109","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\WithdrawModal.tsx":"110","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\DepositModal.tsx":"111","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx":"112","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useAllowance.ts":"113","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ModalActions\\index.ts":"114","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\compoundApyHelpers.ts":"115","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useHarvest.ts":"116","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Label\\index.ts":"117","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useUnstake.ts":"118","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\index.ts":"119","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\TokenInput\\TokenInput.tsx":"120","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\delegateFarms.ts":"121","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\callHelpers.ts":"122","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ModalActions\\ModalActions.tsx":"123","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Label\\Label.tsx":"124","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\BalanceInput.tsx":"125","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\Input.tsx":"126","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Spacer\\index.ts":"127","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Spacer\\Spacer.tsx":"128","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardTime.tsx":"129","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDetails.tsx":"130","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDescription.tsx":"131","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardHeader.tsx":"132","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardProgress.tsx":"133","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\DetailsSection.tsx":"134","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\CardHeading.tsx":"135","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\Socials.tsx":"136","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\FarmingCard.tsx":"137","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useFarmsWithBalance.ts":"138","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Announcements.tsx":"139","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useWeb3.ts":"140","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeStats.tsx":"141","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\FarmStakingCard.tsx":"142","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CardValue.tsx":"143","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getTimePeriods.ts":"144","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\TopSocial.tsx":"145","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeWalletBalance.tsx":"146","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeHarvestBalance.tsx":"147","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Enterance.tsx":"148","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\News.tsx":"149","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Features.tsx":"150","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Sitestat.tsx":"151","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\CallOption\\ClaimedButtons\\index.tsx":"152","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchVaultPublic.ts":"153","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchVaultUser.ts":"154","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\bigNumber.ts":"155","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\index.ts":"156","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\Dashboard.tsx":"157","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\TresuaryTokens.js":"158","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\ChartCard.tsx":"159","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\helpers.tsx":"160","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\ChartModal.tsx":"161","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\Chart.tsx":"162"},{"size":286,"mtime":1639820389000,"results":"163","hashOfConfig":"164"},{"size":1353,"mtime":1639820389000,"results":"165","hashOfConfig":"164"},{"size":3352,"mtime":1649070078808,"results":"166","hashOfConfig":"164"},{"size":5355,"mtime":1649169563348,"results":"167","hashOfConfig":"164"},{"size":449,"mtime":1639820389000,"results":"168","hashOfConfig":"164"},{"size":817,"mtime":1639820389000,"results":"169","hashOfConfig":"164"},{"size":4918,"mtime":1639820389000,"results":"170","hashOfConfig":"164"},{"size":2927,"mtime":1639820389000,"results":"171","hashOfConfig":"164"},{"size":8462,"mtime":1648910687351,"results":"172","hashOfConfig":"164"},{"size":41,"mtime":1639820389000,"results":"173","hashOfConfig":"164"},{"size":33,"mtime":1639820389000,"results":"174","hashOfConfig":"164"},{"size":34,"mtime":1639820389000,"results":"175","hashOfConfig":"164"},{"size":34,"mtime":1639820389000,"results":"176","hashOfConfig":"164"},{"size":318,"mtime":1639820389000,"results":"177","hashOfConfig":"164"},{"size":646,"mtime":1639820389000,"results":"178","hashOfConfig":"164"},{"size":1120,"mtime":1639820389000,"results":"179","hashOfConfig":"164"},{"size":912,"mtime":1639820389000,"results":"180","hashOfConfig":"164"},{"size":746,"mtime":1639820389000,"results":"181","hashOfConfig":"164"},{"size":909,"mtime":1639820389000,"results":"182","hashOfConfig":"164"},{"size":3058,"mtime":1639820389000,"results":"183","hashOfConfig":"164"},{"size":14897,"mtime":1649168961551,"results":"184","hashOfConfig":"164"},{"size":600,"mtime":1639820389000,"results":"185","hashOfConfig":"164"},{"size":659,"mtime":1639820389000,"results":"186","hashOfConfig":"164"},{"size":2441,"mtime":1639820389000,"results":"187","hashOfConfig":"164"},{"size":275,"mtime":1639820389000,"results":"188","hashOfConfig":"164"},{"size":323,"mtime":1648910859719,"results":"189","hashOfConfig":"164"},{"size":2297,"mtime":1639820389000,"results":"190","hashOfConfig":"164"},{"size":2367,"mtime":1649165446125,"results":"191","hashOfConfig":"164"},{"size":2311,"mtime":1649064146738,"results":"192","hashOfConfig":"164"},{"size":5288,"mtime":1639820389000,"results":"193","hashOfConfig":"164"},{"size":4520,"mtime":1639820389000,"results":"194","hashOfConfig":"164"},{"size":4827,"mtime":1648905588790,"results":"195","hashOfConfig":"164"},{"size":547,"mtime":1639820389000,"results":"196","hashOfConfig":"164"},{"size":910,"mtime":1648563141037,"results":"197","hashOfConfig":"164"},{"size":5883,"mtime":1648563378698,"results":"198","hashOfConfig":"164"},{"size":459,"mtime":1639820389000,"results":"199","hashOfConfig":"164"},{"size":303,"mtime":1639820389000,"results":"200","hashOfConfig":"164"},{"size":251,"mtime":1639820389000,"results":"201","hashOfConfig":"164"},{"size":360,"mtime":1639820389000,"results":"202","hashOfConfig":"164"},{"size":748,"mtime":1639820389000,"results":"203","hashOfConfig":"164"},{"size":391,"mtime":1639820389000,"results":"204","hashOfConfig":"164"},{"size":3724,"mtime":1648552412096,"results":"205","hashOfConfig":"164"},{"size":1020,"mtime":1648910908009,"results":"206","hashOfConfig":"164"},{"size":1574,"mtime":1639820389000,"results":"207","hashOfConfig":"164"},{"size":1992,"mtime":1639820389000,"results":"208","hashOfConfig":"164"},{"size":755,"mtime":1639820389000,"results":"209","hashOfConfig":"164"},{"size":151,"mtime":1639820389000,"results":"210","hashOfConfig":"164"},{"size":185,"mtime":1639820389000,"results":"211","hashOfConfig":"164"},{"size":9039,"mtime":1639820389000,"results":"212","hashOfConfig":"164"},{"size":152,"mtime":1649071410805,"results":"213","hashOfConfig":"164"},{"size":10047,"mtime":1648561701880,"results":"214","hashOfConfig":"164"},{"size":549,"mtime":1648562795533,"results":"215","hashOfConfig":"164"},{"size":899,"mtime":1639820389000,"results":"216","hashOfConfig":"164"},{"size":2687,"mtime":1648631056874,"results":"217","hashOfConfig":"164"},{"size":6286,"mtime":1639820389000,"results":"218","hashOfConfig":"164"},{"size":1915,"mtime":1648295306341,"results":"219","hashOfConfig":"164"},{"size":2509,"mtime":1648634141568,"results":"220","hashOfConfig":"164"},{"size":3338,"mtime":1639820389000,"results":"221","hashOfConfig":"164"},{"size":4213,"mtime":1639820389000,"results":"222","hashOfConfig":"164"},{"size":4433,"mtime":1648910982883,"results":"223","hashOfConfig":"164"},{"size":486,"mtime":1639820389000,"results":"224","hashOfConfig":"164"},{"size":205,"mtime":1639820389000,"results":"225","hashOfConfig":"164"},{"size":740,"mtime":1639820389000,"results":"226","hashOfConfig":"164"},{"size":1274,"mtime":1639820389000,"results":"227","hashOfConfig":"164"},{"size":878,"mtime":1639820389000,"results":"228","hashOfConfig":"164"},{"size":2471,"mtime":1639820389000,"results":"229","hashOfConfig":"164"},{"size":5514,"mtime":1648562977376,"results":"230","hashOfConfig":"164"},{"size":3086,"mtime":1639820389000,"results":"231","hashOfConfig":"164"},{"size":3363,"mtime":1639820389000,"results":"232","hashOfConfig":"164"},{"size":677,"mtime":1639820389000,"results":"233","hashOfConfig":"164"},{"size":3273,"mtime":1639820389000,"results":"234","hashOfConfig":"164"},{"size":1289,"mtime":1639820389000,"results":"235","hashOfConfig":"164"},{"size":2147,"mtime":1639820389000,"results":"236","hashOfConfig":"164"},{"size":1009,"mtime":1639820389000,"results":"237","hashOfConfig":"164"},{"size":1936,"mtime":1639820389000,"results":"238","hashOfConfig":"164"},{"size":344,"mtime":1639820389000,"results":"239","hashOfConfig":"164"},{"size":2664,"mtime":1639820389000,"results":"240","hashOfConfig":"164"},{"size":965,"mtime":1639820389000,"results":"241","hashOfConfig":"164"},{"size":1009,"mtime":1639820389000,"results":"242","hashOfConfig":"164"},{"size":6173,"mtime":1639820389000,"results":"243","hashOfConfig":"164"},{"size":2460,"mtime":1639820389000,"results":"244","hashOfConfig":"164"},{"size":4505,"mtime":1639820389000,"results":"245","hashOfConfig":"164"},{"size":3495,"mtime":1639820389000,"results":"246","hashOfConfig":"164"},{"size":3903,"mtime":1639820389000,"results":"247","hashOfConfig":"164"},{"size":283,"mtime":1639820389000,"results":"248","hashOfConfig":"164"},{"size":272,"mtime":1639820389000,"results":"249","hashOfConfig":"164"},{"size":2334,"mtime":1649077665409,"results":"250","hashOfConfig":"164"},{"size":5447,"mtime":1639820389000,"results":"251","hashOfConfig":"164"},{"size":1978,"mtime":1639820389000,"results":"252","hashOfConfig":"164"},{"size":4596,"mtime":1639820389000,"results":"253","hashOfConfig":"164"},{"size":2093,"mtime":1648559338923,"results":"254","hashOfConfig":"164"},{"size":1992,"mtime":1639820389000,"results":"255","hashOfConfig":"164"},{"size":25643,"mtime":1639820389000,"results":"256","hashOfConfig":"164"},{"size":2205,"mtime":1639820389000,"results":"257","hashOfConfig":"164"},{"size":4596,"mtime":1639820389000,"results":"258","hashOfConfig":"164"},{"size":1781,"mtime":1639820389000,"results":"259","hashOfConfig":"164"},{"size":5092,"mtime":1639820389000,"results":"260","hashOfConfig":"164"},{"size":52,"mtime":1639820389000,"results":"261","hashOfConfig":"164"},{"size":1067,"mtime":1639820389000,"results":"262","hashOfConfig":"164"},{"size":573,"mtime":1639820389000,"results":"263","hashOfConfig":"164"},{"size":3159,"mtime":1639820389000,"results":"264","hashOfConfig":"164"},{"size":785,"mtime":1639820389000,"results":"265","hashOfConfig":"164"},{"size":1097,"mtime":1639820389000,"results":"266","hashOfConfig":"164"},{"size":2317,"mtime":1639820389000,"results":"267","hashOfConfig":"164"},{"size":39,"mtime":1639820389000,"results":"268","hashOfConfig":"164"},{"size":939,"mtime":1639820389000,"results":"269","hashOfConfig":"164"},{"size":527,"mtime":1639820389000,"results":"270","hashOfConfig":"164"},{"size":1979,"mtime":1639820389000,"results":"271","hashOfConfig":"164"},{"size":1052,"mtime":1639820389000,"results":"272","hashOfConfig":"164"},{"size":1850,"mtime":1639820389000,"results":"273","hashOfConfig":"164"},{"size":1955,"mtime":1648559286658,"results":"274","hashOfConfig":"164"},{"size":902,"mtime":1639820389000,"results":"275","hashOfConfig":"164"},{"size":1578,"mtime":1639820389000,"results":"276","hashOfConfig":"164"},{"size":41,"mtime":1639820389000,"results":"277","hashOfConfig":"164"},{"size":1293,"mtime":1639820389000,"results":"278","hashOfConfig":"164"},{"size":2473,"mtime":1639820389000,"results":"279","hashOfConfig":"164"},{"size":34,"mtime":1639820389000,"results":"280","hashOfConfig":"164"},{"size":1972,"mtime":1639820389000,"results":"281","hashOfConfig":"164"},{"size":76,"mtime":1639820389000,"results":"282","hashOfConfig":"164"},{"size":1957,"mtime":1648559462037,"results":"283","hashOfConfig":"164"},{"size":394,"mtime":1639820389000,"results":"284","hashOfConfig":"164"},{"size":4334,"mtime":1639820389000,"results":"285","hashOfConfig":"164"},{"size":764,"mtime":1639820389000,"results":"286","hashOfConfig":"164"},{"size":460,"mtime":1639820389000,"results":"287","hashOfConfig":"164"},{"size":1566,"mtime":1648559386840,"results":"288","hashOfConfig":"164"},{"size":1120,"mtime":1639820389000,"results":"289","hashOfConfig":"164"},{"size":35,"mtime":1639820389000,"results":"290","hashOfConfig":"164"},{"size":686,"mtime":1639820389000,"results":"291","hashOfConfig":"164"},{"size":1620,"mtime":1648562750374,"results":"292","hashOfConfig":"164"},{"size":2210,"mtime":1639820389000,"results":"293","hashOfConfig":"164"},{"size":1509,"mtime":1639820389000,"results":"294","hashOfConfig":"164"},{"size":924,"mtime":1639820389000,"results":"295","hashOfConfig":"164"},{"size":443,"mtime":1639820389000,"results":"296","hashOfConfig":"164"},{"size":2153,"mtime":1639820389000,"results":"297","hashOfConfig":"164"},{"size":1321,"mtime":1639820389000,"results":"298","hashOfConfig":"164"},{"size":1844,"mtime":1648554782630,"results":"299","hashOfConfig":"164"},{"size":2453,"mtime":1639820389000,"results":"300","hashOfConfig":"164"},{"size":1296,"mtime":1639820389000,"results":"301","hashOfConfig":"164"},{"size":561,"mtime":1648467455421,"results":"302","hashOfConfig":"164"},{"size":992,"mtime":1639820389000,"results":"303","hashOfConfig":"164"},{"size":519,"mtime":1639820389000,"results":"304","hashOfConfig":"164"},{"size":5278,"mtime":1639820389000,"results":"305","hashOfConfig":"164"},{"size":880,"mtime":1648562275530,"results":"306","hashOfConfig":"164"},{"size":1237,"mtime":1639820389000,"results":"307","hashOfConfig":"164"},{"size":1948,"mtime":1639820389000,"results":"308","hashOfConfig":"164"},{"size":742,"mtime":1639820389000,"results":"309","hashOfConfig":"164"},{"size":654,"mtime":1639820389000,"results":"310","hashOfConfig":"164"},{"size":3460,"mtime":1649078623476,"results":"311","hashOfConfig":"164"},{"size":2008,"mtime":1648465702398,"results":"312","hashOfConfig":"164"},{"size":2198,"mtime":1648631269553,"results":"313","hashOfConfig":"164"},{"size":5649,"mtime":1649083253642,"results":"314","hashOfConfig":"164"},{"size":1159,"mtime":1648554477476,"results":"315","hashOfConfig":"164"},{"size":3696,"mtime":1648910876109,"results":"316","hashOfConfig":"164"},{"size":1356,"mtime":1648910939128,"results":"317","hashOfConfig":"164"},{"size":490,"mtime":1647190485000,"results":"318","hashOfConfig":"164"},{"size":39,"mtime":1645437941000,"results":"319","hashOfConfig":"164"},{"size":9538,"mtime":1649070463781,"results":"320","hashOfConfig":"164"},{"size":818,"mtime":1645437941000,"results":"321","hashOfConfig":"164"},{"size":7262,"mtime":1649070339701,"results":"322","hashOfConfig":"164"},{"size":6245,"mtime":1647272621253,"results":"323","hashOfConfig":"164"},{"size":1496,"mtime":1645437941000,"results":"324","hashOfConfig":"164"},{"size":6465,"mtime":1647519887877,"results":"325","hashOfConfig":"164"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},"cyoam7",{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"328"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"328"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"328"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"328"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"328"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"328"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"328"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"328"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"328"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"328"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"328"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"328"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"328"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"328"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"328"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"449"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"328"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"328"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"328"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"462"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"466"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"328"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"328"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"328"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"328"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"328"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"328"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"466"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":4,"source":"517","usedDeprecatedRules":"328"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"328"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"328"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"328"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"328"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"328"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"328"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"328"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"328"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"608"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"328"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"328"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"376"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"466"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"653"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"466"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"653"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"466"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"466"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"328"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"328"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"328"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"328"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"328"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"328"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"328"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"328"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"699"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"328"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"328"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"328"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"328"},"C:\\Users\\90532\\Desktop\\metavill-front\\src\\index.tsx",[],["712","713","714","715","716"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\Providers.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\App.tsx",["717","718","719","720"],"import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@macist-m/robinia-uikit'\nimport BigNumber from 'bignumber.js'\nimport Dashboard from 'views/Dashboard'\nimport { useFetchPublicData } from 'state/hooks'\nimport LeafContainers from 'components/layout/LeafContainers'\nimport CallOption from 'views/CallOption/CallOption'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst DelegateFarms = lazy(() => import('./views/DelegateFarm'))\nconst ApplyForIfos = lazy(() => import('./views/Ifos/ApplyForIfos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\n const Ifos = lazy(() => import('./views/Ifos'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n  console.log(process.env.REACT_APP_CHAIN_ID)\n  return (\n\n    <Router>\n\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/delegatefarm\">\n              <DelegateFarms delegateMode />\n            </Route>\n            <Route path=\"/ifo\">\n              <Ifos />\n            </Route>\n            <Route path=\"/cakePools\">\n              <Pools />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route path=\"/Dashboard\">\n              <Dashboard />\n            </Route>\n            <Route path=\"/CallOption\">\n              <CallOption />\n            </Route>\n\n           \n            \n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n\n    \n      <NftGlobalNotification />\n    </Router>\n\n  )\n}\n\nexport default React.memo(App)\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\style\\Global.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\PageLoader.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\NotFound.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\ApplyForIfos.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Nft\\components\\NftGlobalNotification.tsx",["721","722","723","724","725","726","727"],"import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from '@macist-m/robinia-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n//\n  // useEffect(() => {\n  //   const checkNftStatus = async () => {\n  //     const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\n  //       rabbitmintingfarm,\n  //       [\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n  //       ],\n  //     )\n\n  //     // TODO: Figure out why these values are coming back as an array\n  //     const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n  //     const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n  //     const [canClaim]: [boolean] = canClaimArr\n  //     const [hasClaimed]: [boolean] = hasClaimedArr\n\n  //     if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n  //       showModal.current()\n  //     }\n  //   }\n\n  //   if (account && !document.location.href.includes('/nft')) {\n  //     checkNftStatus()\n  //   }\n  // }, [account, showModal])\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\hooks.ts",["728","729","730","731","732","733","734","735"],"import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { useLockedSale } from 'hooks/useContract'\nimport { getBusdAddress, getLockedSaleAddress } from 'utils/addressHelpers'\nimport Web3 from 'web3'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync,fetchCakeVaultFees,fetchCakeVaultPublicData,fetchCakeVaultUserData } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData)\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n\n  return farms\n}\n\nexport const usePoolss = (): Pool[] => {\n  const pools = useSelector((state: State) => state.pools.data)\n\n  return pools;\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\nexport const usePoolUser = (pid) => {\n  useSelector((state: State) => console.log(state))\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 3 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\nexport const usePriceEthBnb = () : BigNumber => {\n  const BnbPrice = usePriceBnbBusd()\n  const pid = 9\n  const farm = useFarmFromPid(pid)\n  const EthPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(BnbPrice)\n  return EthPrice\n}\nexport const usePriceBSTEEMBnb = () : BigNumber => {\n  const BnbPrice = usePriceBnbBusd()\n  const pid = 18\n  const farm = useFarmFromPid(pid)\n  const BSTEEMPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(BnbPrice)\n  return BSTEEMPrice\n}\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 1 // EGG-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useRealCakeBusd = (): BigNumber => {\n  const pid = 5;\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n\n\n\nexport const usePoolsTotalValue = (): BigNumber => {\n    const pools = usePoolss();\n    const bnbPrice = usePriceBnbBusd();\n    const cakePrice = useRealCakeBusd();\n    const ethPrice = usePriceEthBnb()\n    // console.log(cakePrice.toNumber())\n    let value = new BigNumber(0);\n    for(let i = 0; i<pools.length;i++) {\n      const pool = pools[i];\n      if(pool.stakingTokenName) {\n        let val;\n        if(pool.stakingTokenName === QuoteToken.CAKE) {\n          val = cakePrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\n        } else if (pool.stakingTokenName === QuoteToken.BNB) {\n          val = bnbPrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\n        } else if (pool.stakingTokenName === QuoteToken.ETH) {\n          val = ethPrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\n        } else {\n          val = pool.totalStaked;\n        }\n\n        value = value.plus(val)\n      }\n    }\n    // console.log(`Pool tvl : ${value}`)\n    return new BigNumber(value);\n}\n\nexport const useFetchCakeVault = (account) => {\n  // const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n   useEffect(() => {\n     dispatch(fetchCakeVaultUserData({ account }))\n   }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalRobiniaInVault: totalRobiniaInVaultAsString,\n    estimatedRobiniaBountyReward: estimatedRobiniaBountyRewardAsString,\n    totalPendingRobiniaHarvest: totalPendingRobiniaHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    tokenTaxRate,\n\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      robiniaAtLastUserAction: robiniaAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.farms.cakeVault)\n\n  const estimatedRobiniaBountyReward = useMemo(() => {\n    return new BigNumber(estimatedRobiniaBountyRewardAsString)\n  }, [estimatedRobiniaBountyRewardAsString])\n\n  const totalPendingRobiniaHarvest = useMemo(() => {\n    return new BigNumber(totalPendingRobiniaHarvestAsString)\n  }, [totalPendingRobiniaHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalRobiniaInVault = useMemo(() => {\n    return new BigNumber(totalRobiniaInVaultAsString)\n  }, [totalRobiniaInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const robiniaAtLastUserAction = useMemo(() => {\n    return new BigNumber(robiniaAtLastUserActionAsString)\n  }, [robiniaAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalRobiniaInVault,\n    estimatedRobiniaBountyReward,\n    totalPendingRobiniaHarvest,\n    tokenTaxRate,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      robiniaAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const poolTVL = usePoolsTotalValue();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  const ethPrice = usePriceEthBnb()\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken || farm.isTokenOnly) {\n      let val;\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else if(farm.quoteTokenSymbol === QuoteToken.ETH){\n        val = ethPrice.times(farm.lpTotalInQuoteToken)\n      }\n      // else if(farm.isTokenOnly){\n      //   console.log(farm)\n      //   val = cakePrice.times(farm.tokenAmount);\n      // }\n      else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n\n      value = value.plus(val);\n    }\n  }\n\n  value = value.plus(poolTVL);\n  return value;\n}\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getRpcUrl.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Menu\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\RefreshContext.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\BlockContext.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\ThemeContext.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\Localisation\\languageContext.tsx",["736"],"import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\CallOption\\CallOption.tsx",["737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { Link, Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { Image, Text, Button, LinkExternal, Flex } from '@macist-m/robinia-uikit'\nimport Page from 'components/layout/Page'\nimport useBlock from 'hooks/useBlock'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport FlexLayout from 'components/layout/Flex'\n\nimport { Address, QuoteToken } from 'config/constants/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport TokenInput from 'components/TokenInput'\n\nimport {\n  getBusdAddress,\n  getLockedSaleAddress,\n  getRbsTokenAddress,\n  getWbnbAddress,\n} from 'utils/addressHelpers'\nimport { useBusd, useLockedSale, useRbs ,useTokenContract} from 'hooks/useContract'\nimport Web3 from 'web3'\nimport UnlockButton from 'components/UnlockButton'\nimport Divider from 'views/Farms/components/Divider'\nimport ClaimButton from 'components/ExpandableSectionButton/ClaimButton'\nimport ClaimedButtons from './ClaimedButtons'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst CallOption: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const block = useBlock()\n  const addressx = getLockedSaleAddress()\n  const busdAddress = getBusdAddress()\n  const lockedSale = useLockedSale(addressx)\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdContract = useBusd()\n  const lpContract = useTokenContract(\"0x4E37C7aB77a9357AD5Ba87a949dcAdeb0Af6cb6A\")\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const [discountedPrice, setDiscountedPrice] = useState('') // fromweiden string dönüyor numbera çevirmedim bi matematik işlemi yapmayacağımız için\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const [veri, setVeri] = useState()\n  const [claimsx, setClaimsx] = useState([])\n  const [claimedOnly, setClaimedOnly] = useState(false)\n  const [tokenamount, setAmount] = useState()\n  const [contractbalance, setBalance] = useState()\n  const [claimtime, setCtime] = useState()\n  const [minpurchase, setMinp] = useState()\n  const [contbalance, setContb] = useState()\n  const [approve, setApprove] = useState()\n  const [busdBalanc, setBusdBalance] = useState(new BigNumber(0))\n  const [buytokken, setBuy] = useState({})\n  const [pickasset, setContract] = useState()\n  const [allow, setAllowance] = useState(0)\n  const [inputAmount, setInputAmount] = useState('')\n  const [discountPerchant, setdiscountPerchant] = useState(Number)\n  const [lpPrice,setLpPrice]=useState(\"\")\n\n  const [buyTokenWBNB, setBuyTokenWBNB] = useState(false) // true ise wbnb ile alacak default busd.\n\n  useEffect(() => {\n    const getClaimList = async () => {\n      if (account) {\n        // account değerini kendi cüzdanımla değiştim bunu account olarak güncellemeliyiz.\n        const userClaims = await lockedSale.methods\n          .getUsersClaims(account)\n          .call()\n        setClaimsx(userClaims)\n      } else {\n        console.log('not logged in')\n      }\n    }\n\n    const getAllowance = async () => {\n      if (account) {\n        const isAllowed = await lpContract.methods.allowance(account, addressx).call()\n        setAllowance(isAllowed)\n      } else {\n        console.log('not Logged in')\n      }\n    }\n\n    const getPrice = async () => {\n      let price = await lockedSale.methods\n        .getTokensOut(busdAddress, '1000000000000000000')\n        .call()\n      // ether görünümünü viewda yapalım daha sağlıklı olacaktır.\n      price = Web3.utils.fromWei(price, 'ether')\n      setDiscountedPrice(new BigNumber(price).toString())\n    }\n    \n\n    const getRbsprice = async () => {\n      let rbs = await lockedSale.methods\n        .getAmountOut(busdAddress, '1000000000000000000')\n        .call()\n      rbs = Web3.utils.fromWei(rbs, 'ether')\n      setAmount(rbs)\n    }\n\n    const getBalance = async () => {\n      const cBalance = await lockedSale.methods.saleBP().call()\n      setBalance(cBalance)\n    }\n\n    const getCtime = async () => {\n      const time = await lockedSale.methods.claimTime().call()\n      setCtime(time)\n    }\n\n    const getMpurch = async () => {\n      const minP = await lockedSale.methods.minAmount().call()\n      setMinp(minP)\n    }\n\n    const getContractBalance = async () => {\n      const contractB = await lockedSale.methods.getContractBalance().call()\n      setContb(contractB)\n    }\n\n    const getBusdBalance = async () => {\n      const busdbalance = account\n        ? await lpContract.methods.balanceOf(account).call()\n        : 0\n      setBusdBalance(new BigNumber(busdbalance))\n    }\n    const getDiscountPerchent = async () => {\n      const discount = await lockedSale.methods.saleBP().call()\n      setdiscountPerchant(discount / 100)\n    }\n\n    getBusdBalance()\n    getAllowance()\n    getContractBalance()\n    getMpurch()\n    getCtime()\n    getBalance()\n    getClaimList()\n    getPrice()\n    getRbsprice()\n    getDiscountPerchent()\n\n  }, [account, lockedSale, addressx, busdContract, busdAddress,lpContract,lpPrice])\n\n  const ClaimExpand = styled.div<{ expanded: boolean }>`\n    overflow: hidden;\n    height: ${(props) => (props.expanded ? 'fit-content' : '0px')};\n    margin-bottom: 16px;\n  `\n  const claimTokens = async (index) => {\n    console.log(account)\n    await lockedSale.methods.claimTokens(index).send({ from: account })\n  }\n\n  const letAllowance = async () => {\n    await lpContract.methods\n      .approve(\n        addressx,\n        '115792089237316195423570985008687907853269984665640564039457584007913129639935',\n      )\n      .send({ from: account })\n  }\n\n  const busdbnb = async (value) => {\n    const busdBnbAddr = value\n    return busdBnbAddr\n  }\n\n  const buyWithWBNB = async (amount) => {\n    // amount wei cinsinden 18 haneli olmalı\n    await lockedSale.methods\n      .buyToken(amount, '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c')\n      .send({ from: account })\n  }\n\n  const buyWithBUSD = async (amount) => {\n    await lockedSale.methods\n      .buyToken(amount, '0x4E37C7aB77a9357AD5Ba87a949dcAdeb0Af6cb6A')\n      .send({ from: account })\n  }\n  function handleChange(e) {\n    setInputAmount(e.target.value)\n  }\n  const handleSelectMax = useCallback(() => {\n    const balance = getBalanceNumber(busdBalanc.times(lpPrice).div(discountedPrice), 18).toFixed(3)\n    console.log(`balance:${balance}`)\n    console.log(`discountedPrice:${discountedPrice}`)\n    console.log(`contbalance:${Web3.utils.fromWei(contbalance)}`)\n    if (parseInt(balance) > parseInt(Web3.utils.fromWei(contbalance))) {\n      setInputAmount(getBalanceNumber(contbalance, 18).toFixed(3))\n      return\n    }\n    setInputAmount(balance)\n  }, [setInputAmount, busdBalanc, discountedPrice, contbalance,lpPrice])\n  return (\n    <Page>\n      <Flex className=\"\" justifyContent=\"center\" alignItems=\"center\" marginBottom={32}>\n        <div className=\"max-h-fit calloption\">\n          <Flex justifyContent=\"space-between\" marginBottom={3}>\n            <Flex\n              className=\"coborder text-calloption \"\n              style={{ maxWidth: 300 }}\n              alignItems=\"center\"\n              padding={0}\n            >\n              <img src=\"/images/matv.png\" alt=\"wst\" style={{ minWidth: 60, maxWidth: 60  }} />\n\n              <div className=\"text-left mt-2 mr-2\">\n              Bond  Amount\n                <Text color='#96906f' fontSize='18px' bold>\n                {contbalance ? Web3.utils.fromWei(contbalance,\"ether\") : 0} MTV\n                </Text>\n              </div>\n            </Flex>\n\n            <Flex\n            className=\"coborder text-calloption\"\n            style={{ minWidth: 140  }}\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            >\n              Bond Price\n              <div style={{lineHeight:1}} className=\"text-calloption  \">\n                <Text color='#96906f' fontSize='18px' bold>${new BigNumber(discountedPrice).toFixed(4)}{' '}</Text>\n              </div>\n            </Flex>\n          </Flex>\n\n          <div className=\"grid grid-cols-1  text-calloption   mb-6 \">\n            <div className=\"mb-4 \">Mint(1,1)</div>\n            <div className=\"grid grid-cols-5 text-center justify-items-start cog\">\n              <div style={{position:\"relative\",paddingRight:\"40px\"}} className=\"lg:ml-12 \">\n                <img src=\"/images/matv.png\" alt=\"wst\" style={{ maxWidth: 45 }} />\n                <img src=\"/images/farms/wbnb.png\" alt=\"bnb\" style={{ maxWidth: 30 ,position:\"absolute\",top:\"18px\",right:\"16px\"}} />\n              </div>\n\n              <div className=\"mt-2\">\n                MINT\n                <Divider />\n                MTV-BNB LP\n              </div>\n              <div className=\"mt-2\">\n                PRICE\n                <Divider />$ {new BigNumber(cakePriceBusd).toFixed(3)}\n              </div>\n              <div className=\"mt-2\">\n                DISCOUNT\n                <Divider />\n                <div>{discountPerchant}%</div>\n              </div>\n\n              <div className=\"mt-2\">\n                VESTING TERM\n                <Divider />\n                <div> {claimtime} Blocks (48 Hours)</div>\n              </div>\n            </div>\n          </div>\n\n          <TokenInput\n            value={inputAmount}\n            onSelectMax={handleSelectMax}\n            onChange={(w) => handleChange(w)}\n            max={\n              busdBalanc && discountedPrice && busdBalanc.toNumber() > 0\n                ? getBalanceNumber(busdBalanc.times(lpPrice).div(discountedPrice), 18).toFixed(3)\n                : 0\n            }\n            symbol=\"MTV\"\n          />\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: '100%',\n              paddingTop: '8px',\n            }}\n          >\n            {allow > 0 ? (\n              <Button\n                style={{ maxWidth: 300 }}\n                type=\"submit\"\n                onClick={async () => buyWithBUSD(Web3.utils.toWei(inputAmount, 'ether'))}\n              >\n                Bond MTV\n              </Button>\n            ) : (\n              <Button\n                style={{ minWidth: 240, maxWidth: 260 }}\n                onClick={async () => letAllowance()}\n              >\n                Approve\n              </Button>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 mt-2 \">\n            <div className=\"grid grid-cols-1 text-calloption gap-2 \">\n              <div>Your Balance</div>\n              <div>Max You Can Buy</div>\n              <div>Market Wst Price </div>\n              <div>Minimum Purchase</div>\n            </div>\n            <div className=\"text-right grid grid-cols-1  text-calloption\">\n              <div>{getBalanceNumber(busdBalanc, 18).toFixed(3)} MTV-BNB LP</div>\n              <div>{contbalance ? Web3.utils.fromWei(contbalance) : 0} MTV</div>\n              <div>$ {new BigNumber(cakePriceBusd).toFixed(3)} </div>\n              <div>{minpurchase ? Web3.utils.fromWei(minpurchase) : 0} MTV</div>\n            </div>\n          </div>\n          <br />\n        </div>\n      </Flex>\n      <ClaimedButtons claimedOnly={setClaimedOnly} setClaimedOnly={claimedOnly} />\n\n      <Flex className=\"mb-10\">\n        <div className=\"grid grid-cols-1  overflow-auto sm:m-auto  max-h-56 claim-card\">\n\n\n          {claimsx.map((element, index) => (\n            <>\n              <Route exact path={`${path}`}>\n                {element.amount > 0 ? (\n\n                  <div className=\"grid grid-cols-3 gap-6 overflow-auto ml-12 mr-12 text-center  text-lg text-calloption\">\n                  <div className=\" text-gray-200 text-lg\">Claim Block </div>\n                    <div className=\" text-gray-200 text-lg \">Amount </div>\n                    <div className=\"  text-gray-200  \"> Claim </div>\n                  <div className=\" cborder text-center  text-lg text-calloption\" >\n                    <LinkExternal\n                      className=\" mr-10 \"\n                      href={`https://bscscan.com/block/countdown/${element.claimBlock}`}\n                    >\n                      <div className=\" sm:ml-1 lg:ml-12 text-lg text-calloption\">\n                        {element.claimBlock}\n                      </div>\n                    </LinkExternal>\n\n                  </div>\n                  <div className=\"  cborder text-calloption\">\n                    {getBalanceNumber(element.amount, 18).toFixed(4)}{' '}\n                  </div>\n\n                  <Button\n                  disabled={element.claimBlock > block}\n                  style={{ maxWidth: 76, maxHeight: 25, marginLeft: 45 ,color:\"white\" , borderRadius:6 }}\n                  onClick={async () => claimTokens(index)}\n                >\n                  Claim\n                </Button>\n                  </div>\n\n                ) : (\n                  null\n                )}\n              </Route>\n\n              <Route exact path={`${path}/history`}>\n                {element.amount > 0 ? (\n                  null\n                ) : (\n                  <div className=\"grid grid-cols-3 gap-6  overflow-auto ml-14 mr-14 text-center  text-lg text-calloption\">\n                  <div className=\" mr-4 text-gray-200 text-lg\">Claim Block </div>\n                    <div className=\" text-gray-200 text-lg \">Amount </div>\n                    <div className=\"text-gray-200  \"> Claim </div>\n                  <div className=\" cborder text-center  text-lg text-calloption\" >\n                    <LinkExternal\n                      className=\" mr-10 \"\n                      href={`https://bscscan.com/block/countdown/${element.claimBlock}`}\n                    >\n                      <div className=\" sm:ml-1 lg:ml-24 text-lg text-calloption\">\n                        {element.claimBlock}\n                      </div>\n                    </LinkExternal>\n\n                  </div>\n                  <div className=\"  cborder text-calloption\">\n                    {getBalanceNumber(element.amount, 18).toFixed(4)}{' '}\n                  </div>\n                  <div className=\"text-calloption  text-center    rounded-xl   \">\n                  Claimed\n                </div>\n                  </div>\n                )}\n\n              </Route>\n\n              <div hidden> Claim yapıldımı : {element.claimed}</div>\n\n            </>\n          ))}\n        </div>\n\n      </Flex>\n\n    </Page>\n  )\n}\n\nexport default CallOption","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\LeafContainers.tsx",[],["773","774","775","776","777"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Page.tsx",["778"],"import React from 'react'\n\nimport styled from 'styled-components'\nimport MainFooter from 'components/Partials/MainFooter'\nimport Container from './Container'\n\nconst PageWrapper = styled(Container)`\n  min-height: calc(100vh - 88px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\ntype Props = {\n  title?: string,\n}\n\nconst Page: React.FC<Props> = ({ title, children }) => (\n  <PageWrapper>\n    {children}\n    <MainFooter />\n  </PageWrapper>\n)\n\nexport default Page\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\Details.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\actions.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\types.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Menu\\config.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\Home.tsx",["779","780","781","782","783","784","785","786","787"],"import React from 'react'\nimport Page from 'components/layout/Page'\nimport Socials from 'components/Partials/Socials'\nimport Divider from 'views/Farms/components/Divider'\nimport TopSocials from 'components/Partials/TopSocial'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport Enterance from './components/Enterance'\nimport CakeStats from './components/CakeStats'\nimport TopFarms from './components/TopFarms'\nimport Announcements from './components/Announcements'\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport '../../style/slider-dots.css'\nimport TokensCard from './components/TokensCard'\nimport Benefits from './components/Benefits'\nimport Partners from './components/Partners'\nimport Sitestat from './components/Sitestat'\nimport SlideImage from './components/slideimage'\nimport News from './components/News'\nimport LaunchPools from './components/LaunchPools'\nimport Features from './components/Features'\n\nconst Home: React.FC = () => {\n  return (\n    <Page>\n      <div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-12 gap-8\">\n          \n        \n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-12 lg:mb-40\">\n            <Enterance />\n          </div>\n        \n          \n          <div className=\"col-span-12  mt-32\">\n            <SlideImage />\n          </div>\n          \n         \n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-6 mt-20\">\n            <News />\n          </div>\n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-6 mt-20\">\n            <Announcements />\n          </div>\n          \n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-12 mt-20\">\n            <Features />\n          </div>\n          {/* <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-12 mt-20\">\n            <Partners />\n          </div> */}\n          \n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-12 mt-20 mb-20\">\n            <Sitestat />\n          </div>\n        \n          \n          <div className=\"col-span-12  col-start-0\">\n          <Divider />\n          </div>\n          \n       \n         \n        </div>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\DelegateFarm.tsx",["788","789","790","791","792","793","794","795","796","797"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@macist-m/robinia-uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd ,usePriceBSTEEMBnb } from 'state/hooks'\nimport {useCustomTokenBalance} from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport DelegateFarms from '../../config/constants/delegateFarms';\n\n\nexport interface FarmsProps {\n  delegateMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const BSTEEMPrice = usePriceBSTEEMBnb()\n  const steemBalance = getBalanceNumber(useCustomTokenBalance(\"0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d\",\"0x2C875C19E093F446dE65E46473170703486eb0E6\"))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { delegateMode } = farmsProps\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  // const activeFarms = DelegateFarms.filter(x => x.isActive === true);\n   const activeFarms = farmsLP.filter(\n     (farm) => farm.delegate === true && farm.multiplier !== '0X',\n   )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  // const delegateFarmx = DelegateFarms[0]\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        console.log(farm)\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        // console.log(steemBalance)\n        let totalValue = new BigNumber(steemBalance)\n\n\n        if (farm.delegate) {\n          totalValue = totalValue.times(BSTEEMPrice)\n        }\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n        return {...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n          steemBalance={new BigNumber(steemBalance)}\n          BSTEEMprice={BSTEEMPrice}\n        />\n      ))\n    },\n    [ account, cakePrice, ethereum,BSTEEMPrice,steemBalance],\n  )\n\n  return (\n    <Page>\n      <Heading\n        as=\"h1\"\n        size=\"xl\"\n        color=\"#aeaeae\"\n        mb=\"50px\"\n        style={{ textAlign: 'center' }}\n      >\n        {delegateMode ? 'Stake Tokens to Earn with Robinia Pools' : 'Stake Tokens to Earn with Robinia Farms'}\n      </Heading>\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading> */}\n      {/* <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} /> */}\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n             {farmsList(activeFarms, false)}\n          </Route>\n          <div className=\"rbs-card md:w-4/6 mt-15 py-10\">\n        <div className=\"p-0 md:py-5 md:px-10 flex flex-col items-center\">\n          <div className=\"text-primary text-2xl font-bold mb-5\">\n          SP Delegate Farm Usage and Precautions\n          </div>\n          <div className=\"text-gray leading-7 text-lg text-gray-500\">\n          Documentation will be updated soon.\n          </div>\n          <div className=\"mx-5 my-5 py-4 rounded-full bg-secondary w-60 text-center text-white cursor-pointer shadow-lg\">\n            GO\n          </div>\n        </div>\n      </div>\n        </FlexLayout>\n      </div>\n\n      <div className=\"mb-10\" />\n      <div className=\"mb-16\" />\n    </Page>\n  )\n}\n\nexport default Farms\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\Syrup.tsx",["798","799","800","801","802","803","804","805","806"],"import React from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Heading } from '@macist-m/robinia-uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useFarms, usePriceBnbBusd, usePools, useRealCakeBusd, usePriceCakeBusd } from 'state/hooks'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport Coming from './components/Coming'\nimport PoolCard from './components/PoolCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport Divider from './components/Divider'\n\nconst Farm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const farms = useFarms()\n  const pools = usePools(account)\n  const bnbPriceUSD = usePriceBnbBusd()\n  const rbsPrice = usePriceCakeBusd();\n  const realCakePrice = useRealCakeBusd();\n  const block = useBlock()\n\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\n    const tokenPriceBN = new BigNumber(tokenPrice)\n    if (tokenName === 'BNB') {\n      return new BigNumber(1)\n    }\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD)\n    }\n    return tokenPriceBN\n  }\n  console.log('syrpus')\n  console.log(pools)\n  const poolsWithApy = pools.map((pool) => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\n\n    // /!\\ Assume that the farm quote price is BNB\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\n    const rewardTokenPriceInBNB = priceToBnb(\n      pool.tokenName,\n      rewardTokenFarm?.tokenPriceVsQuote,\n      rewardTokenFarm?.quoteTokenSymbol,\n    )\n\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\n\n    // ödül verilecek token hep rbs olacak\n    const totalyillik = rbsPrice.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR);\n    const stakelenenTokenFiyatCarpimi = (stakingTokenName: string, totalStaked : BigNumber) : BigNumber => {\n      if(stakingTokenName === QuoteToken.CAKE) {\n        return new BigNumber(realCakePrice.times(getBalanceNumber(pool.totalStaked)))\n      } \n      return new BigNumber(0)\n    }\n    const stakedToken = stakelenenTokenFiyatCarpimi(pool.stakingTokenName, pool.totalStaked);\n\n\n    // const totalStakingTokenInPool = stakedTokenPrice.times(getBalanceNumber(pool.totalStaked))\n    const poolTotalStakedAsUsd = realCakePrice.times(pool.totalStaked)\n    const apy = totalyillik.div(stakedToken).times(100)\n\n    return {\n      ...pool,\n      totalStakedUSD : poolTotalStakedAsUsd,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apy,\n    }\n  })\n\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n\n  return (\n    <Page>\n      <PoolTabButtons />\n      <Divider />\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          <>\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\n              <PoolCard key={pool.sousId} pool={pool} />\n            ))}\n\n          </>\n        </Route>\n        <Route path={`${path}/history`}>\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\n            <PoolCard key={pool.sousId} pool={pool} />\n          ))}\n        </Route>\n      </FlexLayout>\n    </Page>\n  )\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nexport default Farm\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\Farms.tsx",["807","808","809","810"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@macist-m/robinia-uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBnb } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const EthPrice = usePriceEthBnb()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '45X' && !farm.delegate,\n  )\n  const inactiveFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !farm.delegate,\n  )\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) =>\n      farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          totalValue = totalValue.times(EthPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethPrice={EthPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum,EthPrice],\n  )\n\n  return (\n    <Page>\n      <Heading\n        as=\"h1\"\n        size=\"xl\"\n        color=\"#aeaeae\"\n        mb=\"50px\"\n        style={{ textAlign: 'center' }}\n      >\n        {tokenMode ? 'Stake Tokens to Earn with Wisteria Pools' : 'Stake Tokens to Earn with Wisteria Farms'}\n      </Heading>\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading> */}\n     <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly\n              ? farmsList(stakedOnlyFarms, false)\n              : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n     \n      <div className=\"mb-16\" />\n    </Page>\n  )\n}\n\nexport default Farms\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useI18n.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\Hero.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\CurrentIfo.tsx",["811","812","813","814","815","816","817","818","819","820"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, BaseLayout, Button, LinkExternal, Flex, Image } from '@macist-m/robinia-uikit'\nimport { ifosConfig } from 'config/constants'\nimport useI18n from 'hooks/useI18n'\nimport IfoCard from './components/IfoCard'\nimport Title from './components/Title'\nimport IfoCards from './components/IfoCards'\nimport Details from './components/Details'\n\nconst LaunchIfoCallout = styled(BaseLayout)`\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n  margin: 0 auto;\n  padding: 32px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst List = styled.ul`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n\n  & > li {\n    line-height: 1.4;\n    margin-bottom: 8px;\n  }\n`\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <div>\n    <IfoCards isSingle>\n        <IfoCard ifo={activeIfo} />\n      </IfoCards>\n\n      <div className=\"rbs-card md:w-4/6 mt-15 py-10\">\n        <div className=\"p-0 md:py-5 md:px-10 flex flex-col items-center\">\n          <div className=\"text-primary text-2xl font-bold mb-5\">\n            Want To Launch Your Own IFO?\n          </div>\n          <div className=\"text-gray leading-7 text-lg text-gray-500\">\n            Launch your project with RobiniaSwap, Binance Smart Chain’s fastest growing\n            AMM project and liquidity provider, to bring your token directly to the most\n            active and rapidly growing community on BSC.\n          </div>\n          <div className=\"mx-5 my-5 py-4 rounded-full bg-secondary w-60 text-center text-white cursor-pointer shadow-lg\">\n            Apply to Launch Your IFO\n          </div>\n        </div>\n      </div>\n\n      {/* Tımeline */}\n      <div className=\"relative wrap overflow-hidden p-5 h-full mt-20 px-5 md:px-10 lg:px-20\">\n        <div className=\"text-center text-2xl font-bold mb-10\">How does it work?</div>\n\n        <div className=\"mb-8 flex flex-col md:flex-row justify-between items-center w-full relative\">\n          <div className=\"order-1 w-5/12\" />\n          <div className=\"z-20 flex items-center order-1 bg-secondary shadow-xl w-14 h-14 rounded-full mb-5 md:mb-0\">\n            <h1 className=\"mx-auto font-semibold text-xl text-white\">1</h1>\n          </div>\n\n          <img\n            src=\"/images/timeline-leafs.svg\"\n            alt=\"timeline-leafs\"\n            className=\"h-full absolute z-1 hidden lg:block\"\n            style={{ left: '50%', top: '50%', marginTop: 29, marginLeft: -18 }}\n          />\n\n          <div\n            className=\"order-1  rounded-3xl shadow-xl w-full md:w-5/12 p-10\"\n            style={{\n              background: 'rgba(242, 117, 0, 0.85)',\n              backdropFilter: 'blur(100px)',\n            }}\n          >\n            <h3 className=\"mb-3 font-bold text-gray-50 text-xl\">\n              Get Your WST-BNB LPs\n            </h3>\n            <p className=\"text-md leading-snug tracking-wide text-gray-100 \">\n              Stake WST-BNB in the liquidity pool to get LP tokens. You’ll spend them\n              buy IFO sale tokens\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mb-8 flex flex-col md:flex-row-reverse justify-between items-center w-full relative\">\n          <div className=\"order-1 w-5/12\" />\n          <div className=\"z-20 flex items-center order-1 bg-primary shadow-xl w-14 h-14 rounded-full mb-5 md:mb-0\">\n            <h1 className=\"mx-auto font-semibold text-xl text-white\">2</h1>\n          </div>\n\n          <img\n            src=\"/images/timeline-leafs.svg\"\n            alt=\"timeline-leafs\"\n            className=\"h-full absolute z-1 transform rotate-180 mt-3 hidden lg:block\"\n            style={{ left: '50%', top: '50%', marginLeft: -26 }}\n          />\n\n          <div\n            className=\"order-2  rounded-3xl shadow-xl w-full md:w-5/12 p-10\"\n            style={{\n              background: 'rgba(4, 106, 56, 0.85)',\n              backdropFilter: 'blur(100px)',\n            }}\n          >\n            <h3 className=\"mb-3 font-bold text-gray-100 text-xl\">Commit LP Tokens</h3>\n            <p className=\"text-md font-medium leading-snug tracking-wide text-gray-100\">\n              When the IFO sales are live, you can “commit” your LP tokens to buy the\n              tokens being sold. We recommend committing to the Basic Sale first, but you\n              can do both if you like.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mb-8 flex flex-col md:flex-row justify-between items-center w-full\">\n          <div className=\"order-1 w-5/12\" />\n          <div className=\"z-20 flex items-center order-1 bg-primary shadow-xl w-14 h-14 rounded-full mb-5 md:mb-0\">\n            <h1 className=\"mx-auto font-semibold text-xl text-white\">3</h1>\n          </div>\n          <div\n            className=\"order-3 rounded-3xl shadow-xl w-full md:w-5/12 p-10\"\n            style={{\n              background: 'rgba(16, 185, 129, 0.85)',\n              backdropFilter: 'blur(100px)',\n            }}\n          >\n            <h3 className=\"mb-3 font-bold text-gray-100 text-xl\">\n              Claim your tokens and achivement\n            </h3>\n            <p className=\"text-md font-medium leading-snug tracking-wide text-gray-100\">\n              When the IFO sales are live, you can “commit” your LP tokens to buy the\n              tokens being sold. We recommend committing to the Basic Sale first, but you\n              can do both if you like.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Details */}\n      <div className=\"mb-20 mx-1\">\n        <Details />\n      </div>\n\n    </div>\n  )\n}\n\nexport default Ifo\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\PastIfo.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Container.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useRefresh.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useTheme.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\web3.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\contexts\\Localisation\\translationsContext.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useContract.ts",["821","822"],"import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getDelegateContractAddress, getLockedSaleAddress, getRbsTokenAddress, getBusdAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport delegate from 'config/abi/delegate.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport delegateFarm from 'config/abi/delegateFarm.json'\nimport lockedsale from 'config/abi/lockedsale.json'\nimport { add } from 'lodash'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\n\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useDelegateContract = () => {\n  const abi = (delegate as unknown) as AbiItem\n  return useContract(abi, getDelegateContractAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport const useDelegateFarmContract = (address: string) => {\n  const delegateFarmAbi = (delegateFarm as unknown) as AbiItem\n  return useContract(delegateFarmAbi, address)\n}\nexport const useTokenContract = (address) => {\n  return useERC20(address)\n}\n\nexport const useLockedSale = (address : string) => {\n  const abi = (lockedsale as unknown) as AbiItem\n  return useContract(abi, getLockedSaleAddress())\n}\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useRbs = () => {\n  return useERC20(getRbsTokenAddress())\n}\nexport const useBusd = () => {\n  return useERC20(getBusdAddress())\n}\n\nexport default useContract\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\addressHelpers.ts",["823"],"import addresses from 'config/constants/contracts'\nimport { add } from 'lodash'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\n\nexport const getCakeVaultAddress = () => {\n  return addresses.cakeVault[chainId]\n}\n\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const getBusdAddress = () => {\n  return addresses.busd[chainId]\n}\n\nexport const getDelegateContractAddress = () => {\n  return addresses.delegate[chainId];\n}\nexport const getLockedSaleAddress = () => {\n  return addresses.lockedsale[chainId]\n}\nexport const getRbsTokenAddress = () => {\n  return addresses.rbs[chainId]\n}","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\translateTextHelpers.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\localisation\\languageCodes.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoTabButtons\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\Divider.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\Divider.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\PoolCard.tsx",["824","825","826","827","828","829","830","831"],"import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, IconButton, useModal, AddIcon, Image } from '@macist-m/robinia-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\nimport Label from 'components/Label'\nimport { useERC20 } from 'hooks/useContract'\nimport { useSousApprove, usePoolApprove } from 'hooks/useApprove'\nimport useI18n from 'hooks/useI18n'\nimport { useSousStake, usePoolStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber, getBasePoint } from 'utils/formatBalance'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport Balance from 'components/Balance'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport DepositModal from './DepositModal'\nimport WithdrawModal from './WithdrawModal'\nimport CompoundModal from './CompoundModal'\nimport CardTitle from './CardTitle'\nimport Card from './Card'\nimport OldSyrupTitle from './OldSyrupTitle'\nimport HarvestButton from './HarvestButton'\nimport CardFooter from './CardFooter'\n\ninterface PoolWithApy extends Pool {\n  apy: BigNumber\n  totalStakedUSD?: any\n}\n\ninterface HarvestProps {\n  pool: PoolWithApy\n  totalStakedUSD? : any\n}\n\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\n  const {\n    sousId,\n    image,\n    tokenName,\n    stakingTokenName,\n    stakingTokenAddress,\n    projectLink,\n    harvest,\n    apy,\n    tokenDecimals,\n    poolCategory,\n    totalStaked,\n    totalStakedUSD,\n    startBlock,\n    endBlock,\n    isFinished,\n    userData,\n    stakingLimit,\n    contractAddress,\n    depositFee,\n    withdrawalFeeLevels\n  } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const TranslateString = useI18n()\n  const stakingTokenContract = useERC20(stakingTokenAddress)\n  const { account } = useWallet()\n  const block = useBlock()\n\n  /* const { onApprove } = useSousApprove(stakingTokenContract, sousId) */\n  const { onApprove } = usePoolApprove(stakingTokenContract, contractAddress[56], 1)\n  // const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onStake } = usePoolStake(9999, contractAddress[56])\n  const { onUnstake } = useSousUnstake(sousId)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const allowance = new BigNumber(userData?.allowance || 0)\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\n  const earnings = new BigNumber(userData?.pendingReward || 0)\n  const earningEther = earnings.div(10**18)\n\n  const blocksUntilStart = Math.max(startBlock - block, 0)\n  const blocksRemaining = Math.max(endBlock - block, 0)\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\n  const isCardActive = isFinished && accountHasStakedBalance\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\n      onConfirm={onStake}\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\n    />,\n  )\n\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} withdrawalFeeLevels={withdrawalFeeLevels} />,\n  )\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, setRequestedApproval])\n\n  return (\n    <Card isActive={isCardActive} isFinished={isFinished && sousId !== 0}>\n      {isFinished && sousId !== 0 && <PoolFinishedSash />}\n      <div style={{ padding: '24px' }}>\n        <CardTitle isFinished={isFinished && sousId !== 0}>\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\n        </CardTitle>\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\n          <div style={{ flex: 1 }}>\n            <Image src={`/images/farms/${image || tokenName.toLocaleLowerCase()}.png`} width={64} height={64} alt={tokenName} />\n\n          </div>\n          <div style={{color:\"#fff\",backgroundColor:\"#F27400\",padding:\"6px 7px\",marginRight:\"8px\",borderRadius:\"13px\"}}>10x</div>\n          {account && harvest && !isOldSyrup && (\n            <HarvestButton\n              disabled={!earnings.toNumber() || pendingTx}\n              text={pendingTx ? 'Collecting' : 'Harvest'}\n              onClick={async () => {\n                setPendingTx(true)\n                await onReward()\n                setPendingTx(false)\n              }}\n            />\n          )}\n        </div>\n\n        <StyledCardActions>\n          {!account && <UnlockButton />}\n          {account &&\n            (needsApproval && !isOldSyrup ? (\n              <div style={{ flex: 1 }}>\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} fullWidth>\n                  {`Approve ${stakingTokenName}`}\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Button\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\n                  onClick={\n                    isOldSyrup\n                      ? async () => {\n                          setPendingTx(true)\n                          await onUnstake('0')\n                          setPendingTx(false)\n                        }\n                      : onPresentWithdraw\n                  }\n                >\n                  {`Unstake ${stakingTokenName}`}\n                </Button>\n                <StyledActionSpacer />\n                {!isOldSyrup && (\n                  <IconButton disabled={isFinished && sousId !== 0} onClick={onPresentDeposit}>\n                    <AddIcon color=\"background\" />\n                  </IconButton>\n                )}\n              </>\n            ))}\n        </StyledCardActions>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>{TranslateString(736, 'RBS Earned')}:</div>\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\n            '-'\n          ) : (\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(earnings)} decimals={8} unit=\" RBS\" />\n          )}\n        </StyledDetails>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APR')}:</div>\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\n            '-'\n          ) : (\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\n          )}\n        </StyledDetails>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>\n            <span role=\"img\" aria-label={stakingTokenName}>\n              🥞{' '}\n            </span>\n            {TranslateString(384, 'Your Stake')}:\n          </div>\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\n        </StyledDetails>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>\n            Deposit Fee:\n          </div>\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBasePoint(new BigNumber(depositFee))} decimals={2} unit=\"%\"/>\n        </StyledDetails>\n      </div>\n      <CardFooter\n        projectLink={projectLink}\n        totalStaked={totalStakedUSD}\n        blocksRemaining={blocksRemaining}\n        isFinished={isFinished}\n        blocksUntilStart={blocksUntilStart}\n        poolCategory={poolCategory}\n      />\n    </Card>\n  )\n}\n\nconst PoolFinishedSash = styled.div`\n  background-image: url('/images/pool-finished-sash.svg');\n  background-position: top right;\n  background-repeat: not-repeat;\n  height: 135px;\n  position: absolute;\n  right: -24px;\n  top: -24px;\n  width: 135px;\n`\n\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 16px 0;\n  width: 100%;\n  box-sizing: border-box;\n`\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n`\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledDetails = styled.div`\n  display: flex;\n  font-size: 14px;\n`\n\nexport default PoolCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\Divider.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx",["832","833","834"],"import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton, BackgroundImage } from '@macist-m/robinia-uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport cardBg from './kartbg.svg'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 6s linear infinite;\n  border-radius: 16px;\n  filter: blur(0px);\n  \n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\nconst FCard = styled.div`\n  align-self: baseline;\n  margin-top:70px;\n  background-color:#e0d9b8;\n  border: 1px navy solid; \n  outline: 1px navy solid;  \n  outline-offset: -12px;  \n  outline-color:white;\n  padding: 5px;\n  border-width:1px;\n  border-color:white;\n  backdrop-filter: blur(40px);\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 45px;\n  position: relative;\n  text-align: center;\n`\nconst FCardSolo = styled.div`\n  align-self: baseline;\n  margin-top:70px;\n  \n  border:20px solid transparent;\n  border-image: url(${cardBg}) 30 round;\n  border-image-width:180px;\n  border-image-outset:65px;\n  border-image-slice:30%;\n  border-width:20px;\n  padding: 50px;\n \n  margin-bottom:20px;\n  backdrop-filter: blur(40px);\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  position: relative;\n  text-align: center;\n`\n\n\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice,ethPrice ,bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    //   if(farm.isTokenOnly){\n\n    //    return cakePrice.times(farm.lpTotalInQuoteToken)\n    //  }\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n      return ethPrice.times(farm.lpTotalInQuoteToken)\n    }\n    // if(farm.isTokenOnly){\n\n    //   return bnbPrice.times(farm.lpTotalInQuoteToken)\n    // }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol,ethPrice])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'RBS'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <div>\n      {farm.tokenSymbol === 'RBS' ?\n    <FCard  >\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text color=\"#ffffff\" bold>\n            {TranslateString(352, 'APR')}:\n          </Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text color=\"#ffffff\" bold>\n          {TranslateString(318, 'Earn')}:\n        </Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '20px' }} color=\"#ffffff\">\n          {TranslateString(10001, 'Deposit Fee')}:\n        </Text>\n        <Text bold style={{ fontSize: '20px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      \n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n     : \n    <FCard  >\n      {farm.tokenSymbol === 'sss' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text color=\"#ffffff\" bold>\n            {TranslateString(352, 'APR')}:\n          </Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text color=\"#ffffff\" bold>\n          {TranslateString(318, 'Earn')}:\n        </Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '20px' }} color=\"#ffffff\">\n          {TranslateString(10001, 'Deposit Fee')}:\n        </Text>\n        <Text bold style={{ fontSize: '20px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard> }\n     \n    \n    \n      \n    \n    </div>\n    \n  )\n}\n\nexport default FarmCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCards.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\ClaimButton.tsx",[],["835","836","837","838","839"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\MainFooter.tsx",["840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856"],"import React from 'react'\nimport CardValue from 'views/Home/components/CardValue'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Flex } from '@macist-m/robinia-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport {\n  useTotalSupply,\n  useBurnedBalance,\n  useCustomTokenBalance,\n} from 'hooks/useTokenBalance'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { QuoteToken } from 'config/constants/types'\n\nimport {\n  useFarms,\n  usePriceCakeBusd,\n  useTotalValue,\n  usePriceBnbBusd,\n} from '../../state/hooks'\nimport Socials from './Socials'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst addToMetamask = function () {\n  window.ethereum\n    .request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20',\n        options: {\n          address: '0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7',\n          symbol: 'WST',\n          decimals: 18,\n          image: `${window.location.origin}/images/favicons/apple-icon-72x72.png`,\n        },\n      },\n    })\n    .then((success) => {\n      if (success) {\n        console.log('WST successfully added to wallet!')\n      } else {\n        throw new Error('Something went wrong.')\n      }\n    })\n    .catch(console.error)\n}\nconst MainFooter = () => {\n  const Box = styled.div`\n    color: #8d694a;\n    line-height: 2;\n    margin-top: 25px;\n  `\n  const Values = styled.div`\n  display: flex;\n  flex-wrap:wrap;\n  justify-content:space-around;\n \n  }\n`\n  const Text = styled.div`\ncolor: #8d694a;\nfont-weight:${(props) => props.property };\n \n  }\n`\n\n  return (\n    <Values>\n      <img src=\"/images/Metavill1.svg\" alt=\"rbs-ico\" />\n      <Box>\n        <Text property='bold'>Products</Text>\n        <Text>Stake(3,3)</Text>\n        <div>\n          <a href=\"/calloption\">Call Options</a>\n        </div>\n        <div>\n          <a href=\"/ifo\">IFO</a>{' '}\n        </div>\n      </Box>\n      <Box>\n        <Text property='bold'>\n          {' '}\n          <a href=\"https://blokfield.gitbook.io/wisteria-swap/\">Docs</a>\n        </Text>\n        <a href=\"https://steemit.com/@robinia/posts\">News</a>\n        <Text>Partners</Text>\n        <Text >\n          <a href=\"https://github.com/TechRate/Smart-Contract-Audits/blob/main/December/Wisteria%20Swap.pdf\">\n            Audit\n          </a>\n        </Text>\n      </Box>\n      <Box>\n        <Text property='bold'>Service</Text>\n        <Text>DAO</Text>\n        <a href=\"https://bridge.robiniaswap.com/\">Bridge </a>\n      </Box>\n\n      <Box>\n        <Text property='bold'>Community</Text>\n        <Socials />\n      </Box>\n    </Values>\n  )\n}\n\nexport default MainFooter\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\FarmCard.tsx",["857","858","859","860"],"import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@macist-m/robinia-uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport TokenInput from 'components/TokenInput'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n  depositFee? : string\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: rgba(255, 255, 255, 0.4);\n  backdrop-filter: blur(40px);\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 25px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  steemBalance?: BigNumber\n  BSTEEMprice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice ,steemBalance,BSTEEMprice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = 'steem'\n\n   const totalValue: BigNumber = useMemo(() => {\n\n\n\n    if (farm.delegate) {\n      return BSTEEMprice.times(steemBalance)\n    }\n     return farm.lpTotalInQuoteToken\n   }, [farm.lpTotalInQuoteToken,BSTEEMprice ,steemBalance,farm.delegate])\n\n   const totalValueFormated = totalValue\n     ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n     : '-'\n  const lpLabel = \"STEEM POWER\"\n  const earnLabel = 'RBS'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\nconsole.log(farm.apy.toNumber())\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'EGG' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n        {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text color=\"#aeaeae\" bold>\n            {TranslateString(352, 'APR')}:\n          </Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text color=\"#aeaeae\" bold>\n          {TranslateString(318, 'Earn')}:\n        </Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '20px' }} color=\"#aeaeae\">\n          {TranslateString(10001, 'Deposit Fee')}:\n        </Text>\n        <Text bold style={{ fontSize: '20px' }}>\n          {farm.depositFee} STEEM\n        </Text>\n      </Flex>\n\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d`\n              : `https://bscscan.com/token/0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\slideimage.tsx",["861","862","863","864"],"import React, { useEffect, useCallback, useState } from 'react'\nimport Slider from 'react-slick'\nimport styled from 'styled-components'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\nconst Slid = styled.div`\n`\n\nconst SlideImage: React.FC<FarmsProps> = (farmsProps) => {\n  \n\n  const sliderSettings = {\n    dots: true,\n    infinite: false,\n    speed: 250,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    initialSlide: 0,\n    arrows: false,\n    responsive: [\n      \n        {\n        breakpoint: 1140,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 960,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 800,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 2,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  }\n\n  return (\n    <>\n        \n      <Slid>\n    <Slider  {...sliderSettings}>\n          \n          <div className='ml-10 '>\n            <img src=\"/images/slider1.png\" className=\" rounded-2xl \" width='350' alt='1' />\n          </div>\n          <div className='ml-10 '>\n            <img src=\"/images/slider2.png\" className=\" rounded-2xl \" width='350' alt='1' />\n          </div>\n          <div className='ml-10 '>\n            <img src=\"/images/slider3.png\" className=\" rounded-2xl\"  width='350' alt='1' />\n          </div>\n          \n         \n\n    </Slider>\n    </Slid>\n\n    \n\n    </>\n  )\n}\n\nexport default SlideImage\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Partners.tsx",["865","866","867"],"import Slider from 'react-slick'\nimport React from 'react'\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport '../../../style/slider-dots.css'\nimport styled from 'styled-components'\n\nconst Text = styled.text`\n  font-size:\"22px\";\n  line-height: 24px;\n \n  color: ${(props) => props.color || '#fff'};\n  \n  }\n`\n\n\nconst PartnerSection = styled.div`\ndisplay:flex;\nflex-wrap:wrap;\njustify-content:space-evenly;\n`\nconst Partner = styled.div`\n  text-align: center;\n\n  `\n\nconst Title = styled(Text)`\n  font-size: 52px;\n  line-height: 42px;\n  color: #8d694a;\n`\n\n\nexport default function Partners() {\n  const sliderSettings = {\n    dots: true,\n    infinite: false,\n    speed: 250,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    initialSlide: 0,\n    arrows: false,\n    responsive: [\n      {\n        breakpoint: 1561,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n\n      {\n        breakpoint: 960,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 800,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 2,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          initialSlide: 1,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  }\n  const partners = [\n    { name: 'partner1' },\n    { name: 'partner2' },\n    { name: 'partner3' },\n    { name: 'partner4' },\n  ]\n  return (\n    <Partner>\n      <section id=\"partners\" />\n      <Title>Partners</Title>\n      <br />\n      <br />\n      <PartnerSection>\n        \n          \n          <div className='partnercard sm:mb-2'>\n            <img src=\"/images/partner1.png\" width='230' alt='1'  />\n          </div>\n\n          <div className='partnercard sm:mb-2'>\n            <img src=\"/images/partner2.png\"  width='230' alt='1' />\n          </div>\n\n          <div className='partnercard sm:mb-2'>\n            <img src=\"/images/partner3.png\"  width='230' alt='1' />\n          </div>\n\n          <div className='partnercard sm:mb-2'>\n            <img src=\"/images/partner4.png\"   width='230' alt='1' />\n          </div>\n\n      </PartnerSection>\n    </Partner>\n  )\n}\n",["868","869","870","871","872"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Benefits.tsx",["873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893"],"import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@macist-m/robinia-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst Benefits = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  \n  return (\n    <div className=\" h-full place-items-center text-white text-center grid grid-cols-4 gap-4 justify-item-center \">\n    <div className=\"col-span-4 pbg text-white text-3xl mb-10    ml-6 py-2  rounded-xl   mb-10\">Our Products</div>\n\n      <div className=\"justify-item-center\">\n      <img src=\"/images/auto-wst.png\"  alt=\"rbs-ico\"  />\n      </div>\n      <div>\n      <img src=\"/images/calloption.png\"  alt=\"rbs-ico\"  />\n      </div>\n      <div>\n      <img src=\"/images/treasury.png\"  alt=\"rbs-ico\"  />\n      </div>\n      <div>\n      <img src=\"/images/deflation.png\"  alt=\"rbs-ico\"  />\n      </div>\n      <div>Auto WST (3,3)</div>\n      <div>Call Option (1,1)</div>\n      <div>Treasury Fund</div>\n      <div>Deflation Model</div>\n      <div className=\"text-gray-300\">WisteriaSwap provides the best APY to users through Auto-Compounding system.</div>\n      <div className=\"text-gray-300\">Users have the opportunity to purchase WST at a lower than market price through Call Option.</div>\n      <div className=\"text-gray-300\">Treasury Fund designed to maintain the value of WST. WisteriaSwap activates the Buy-Burn system using the Treasury Fund when the WST value drops below $1.</div>\n      <div className=\"text-gray-300\">WisteriaSwap has more than 6 Deflation Models to control inflation. The deflation model allows the WST value to remain stable.</div>\n      \n    </div>\n  )\n}\n\nexport default Benefits\n",["894","895","896","897","898"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\index.ts",["899","900","901","902"],"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking, fetchPoolsDepositFees, fetchPoolsWithdrawalFees } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  // const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n  const depositFees = await fetchPoolsDepositFees()\n  const withdrawalFees = await fetchPoolsWithdrawalFees()\n\n  const liveData = poolsConfig.map((pool) => {\n    // const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const depositFee = depositFees.find((entry) => entry.sousId === pool.sousId)\n    const withdrawFee = withdrawalFees.find((entry) => entry.sousId === pool.sousId)\n    console.log('Public fect pools *******')\n    console.log(withdrawFee)\n    console.log(withdrawalFees)\n    return {\n      // ...blockLimit,\n      ...totalStaking,\n      ...depositFee,\n      ...withdrawFee\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n\n  const stakingTokenBalances = await fetchUserBalances(account)\n\n  const stakedBalances = await fetchUserStakeBalances(account)\n\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\index.ts",["903"],"/* eslint-disable no-param-reassign */\nimport { createSlice,createAsyncThunk,PayloadAction} from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\nimport fetchVaultUserr from './fetchVaultUser'\nimport { FarmsState, Farm ,CakeVault,VaultFees,VaultUser} from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig],\n  userDataLoaded: false\n  ,\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalRobiniaInVault: null,\n    estimatedRobiniaBountyReward: null,\n    totalPendingRobiniaHarvest: null,\n    tokenTaxRate:null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      robiniaAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n    },\n  },\n}\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\n\n  const publicVaultInfo = await fetchPublicVaultData()\n  return publicVaultInfo\n})\n\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees()\n  return vaultFees\n})\n\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\n  'cakeVault/fetchUser',\n  async ({ account }) => {\n    const userData = await fetchVaultUserr(account)\n    console.log(userData)\n    return userData\n  },\n)\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n    updateFarmsUserData: (state, action) => {\n      const { field, value, pid } = action.payload\n      const index = state.data.findIndex((p) => p.pid === pid)\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\n    })\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\n      const fees = action.payload\n      state.cakeVault = { ...state.cakeVault, fees }\n    })\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\n      const userData = action.payload\n      userData.isLoading = false\n      state.cakeVault = { ...state.cakeVault, userData }\n    })\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData ,} = farmsSlice.actions\n\n// Thunks\n\n\nexport default farmsSlice.reducer\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\formatBalance.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useBlock.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\layout\\Flex.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useTokenBalance.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\index.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\HarvestButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\CardFooter.tsx",["904","905"],"import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport Balance from 'components/Balance'\nimport { CommunityTag, CoreTag, BinanceTag } from 'components/Tags'\nimport { PoolCategory } from 'config/constants/types'\n\nconst tags = {\n  [PoolCategory.BINANCE]: BinanceTag,\n  [PoolCategory.CORE]: CoreTag,\n  [PoolCategory.COMMUNITY]: CommunityTag,\n}\n\ninterface Props {\n  projectLink: string\n  totalStaked: BigNumber\n  blocksRemaining: number\n  isFinished: boolean\n  blocksUntilStart: number\n  poolCategory: PoolCategory\n}\n\nconst StyledFooter = styled.div<{ isFinished: boolean }>`\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled2' : 'primary2']};\n  padding: 24px;\n`\n\nconst StyledDetailsButton = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  cursor: pointer;\n  display: inline-flex;\n  font-size: 16px;\n  font-weight: 600;\n  height: 32px;\n  justify-content: center;\n  outline: 0;\n  padding: 0;\n  &:hover {\n    opacity: 0.9;\n  }\n\n  & > svg {\n    margin-left: 4px;\n  }\n`\n\nconst Details = styled.div`\n  margin-top: 24px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst FlexFull = styled.div`\n  flex: 1;\n`\nconst Label = styled.div`\n  font-size: 14px;\n`\nconst TokenLink = styled.a`\n  font-size: 14px;\n  text-decoration: none;\n  color: #12aab5;\n`\n\nconst CardFooter: React.FC<Props> = ({\n  projectLink,\n  totalStaked,\n  blocksRemaining,\n  isFinished,\n  blocksUntilStart,\n  poolCategory,\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const Icon = isOpen ? ChevronUp : ChevronDown\n\n  const handleClick = () => setIsOpen(!isOpen)\n  const Tag = tags[poolCategory]\n\n  return (\n    <StyledFooter isFinished={isFinished}>\n      <Row>\n        <FlexFull>\n          <Tag />\n        </FlexFull>\n        <StyledDetailsButton onClick={handleClick}>\n          {isOpen ? 'Hide' : 'Details'} <Icon />\n        </StyledDetailsButton>\n      </Row>\n      {isOpen && (\n        <Details>\n          <Row style={{ marginBottom: '4px' }}>\n            <FlexFull>\n              <Label>\n                Total Staked\n              </Label>\n            </FlexFull>\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(totalStaked)} unit=' $'/>\n          </Row>\n          {blocksUntilStart > 0 && (\n            <Row>\n              <FlexFull>\n                <Label>{TranslateString(410, 'Start')}:</Label>\n              </FlexFull>\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksUntilStart} decimals={0} />\n            </Row>\n          )}\n          {blocksUntilStart === 0 && blocksRemaining > 0 && (\n            <Row>\n              <FlexFull>\n                <Label>{TranslateString(410, 'End')}:</Label>\n              </FlexFull>\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksRemaining} decimals={0} />\n            </Row>\n          )}\n        </Details>\n      )}\n    </StyledFooter>\n  )\n}\n\nexport default React.memo(CardFooter)\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\Card.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx",["906"],"import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@macist-m/robinia-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          RBS\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx",["907","908","909","910"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@macist-m/robinia-uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n\n\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={80} height={80} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\DepositModal.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\CardTitle.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Pools\\components\\WithdrawModal.tsx",["911","912"],"import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@macist-m/robinia-uikit'\nimport ModalActions from 'components/ModalActions'\nimport Label from 'components/Label'\nimport TokenInput from '../../../components/TokenInput'\nimport useI18n from '../../../hooks/useI18n'\nimport { getFullDisplayBalance, getBasePoint } from '../../../utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  withdrawalFeeLevels? : BigNumber[]\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, withdrawalFeeLevels, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const withdrawFees = withdrawalFeeLevels.map((f,index) => {\n    let bn = 0\n    console.log(f)\n    if(index === 0) {\n      bn = 28800\n    } else if (index === 1) {\n      bn = 57600\n    } else if (index === 2) {\n      bn = 86400\n    }\n    return {\n          fee : `${f.toNumber() / 100} %`,\n          blockNumber : bn\n    }\n  })\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n    <Label text={`Withdrawing before 28800 blocks (1 day) : ${withdrawFees[0].fee}`} />\n    <Label text={`Withdrawing after 28800 to 57600 blocks (2 days) : ${withdrawFees[1].fee}`} />\n    <Label text={`Withdrawing after 57600 to 86400 blocks (3 days) : ${withdrawFees[2].fee}`} />\n    <Label text='Withdrawing after 86400 blocks (3 days) : 0 %' />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useAllEarnings.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\CardActionsContainer.tsx",["913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938"],"import React, { useMemo, useState, useCallback, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text, Heading } from '@macist-m/robinia-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport TokenInput from 'components/TokenInput'\nimport Input from 'components/Input'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport { sendTransaction, toSteem, sendDelegate, getDelegateContract, fetchDelegateUserStaked } from '../../../../utils/steemUtils';\nimport { getDelegateContractAddress } from '../../../../utils/addressHelpers';\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n  delegateAddress? : string\n  depositFee? : any\n}\n\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedDelegate, setRequestedDelegate] = useState(false)\n  const [sync,setSync] = useState(false);\n  const [staked,setStaked] = useState(0);\n  const [harvest,setHarvest] = useState(0);\n  const [delegateAmount, setDelegateAmount] = useState(0);\n  const steem = (window as any).steem_keychain\n  const earning = 0;\n  const contract = useMemo(() => {\n    return getDelegateContract(getDelegateContractAddress());\n  },[])\n  async function updateStaked() {\n    if(account){\n      try {\n        const x = await contract.methods.userInfo(account).call();\n\n        const val = x.amount / 1e18\n        setStaked(val)\n        } catch (ex) {\n          console.error(ex)\n        }\n    }\n\n\n  }\n\n  async function updateHarvest() {\n    if(account){\n      try {\n        const x = await contract.methods.pendingReward(account).call();\n        console.log(x);\n        const val = x / 1e18;\n        setHarvest(val);\n      } catch(ex) {\n        console.error(ex)\n      }\n    }\n\n  }\n  useEffect(() => {\n    updateStaked()\n    updateHarvest()\n  })\n\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      try {\n      setDelegateAmount(parseFloat(e.currentTarget.value))\n      } catch (ex) {\n        setDelegateAmount(0)\n      }\n\n    },\n    [setDelegateAmount],\n  )\n\n  const delegate = async () => {\n    try {\n      setRequestedDelegate(true);\n      const depositFee = 5;\n      console.log('delegate')\n      const steemVal = toSteem(depositFee);\n      if(!steem && !account) {\n        console.error(\"Wallet or steem key chain is not installed\");\n        return;\n      }\n      const delVal = toSteem(delegateAmount)\n      if(delegateAmount === 0) {\n        setRequestedDelegate(false)\n        return;\n      }\n      const result:any = await sendTransaction(steemVal,farm.delegateAddress,account,steem);\n      // const result:any = await sendDelegate('inven.cu02',2,farm.delegateAddress,steem);\n      const message = result.message;\n      const data = result.data;\n      const success = result.success;\n\n      if(success) {\n        // delegate gönder\n        console.log('delegation gönderimi')\n        const username = result.data.username;\n\n        console.log(`Delegation amount : ${delVal}`)\n        const resultDelegate:any = await sendDelegate(username,delVal,farm.delegateAddress,steem);\n        console.log('delegate result');\n        console.log(resultDelegate);\n        setRequestedDelegate(false)\n      } else {\n        console.error(message);\n        setRequestedDelegate(false)\n        // hata gönderilebilir\n      }\n      console.log(result)\n      setRequestedDelegate(false)\n    } catch (ex) {\n      console.error(ex)\n    }\n  }\n\n  const redirectSteemKeychain = () => {\n    if((window as any).steem_keychain) {\n      // refresh\n\n    } else {\n      window.open(\"https://chrome.google.com/webstore/detail/steem-keychain/lkcjlnjfpbikmcmbachjpdbijejflpcm\")\n    }\n  }\n\n  const renderApprovalOrStakeButton = () => (\n      <Button mt=\"8px\" fullWidth disabled={requestedDelegate} onClick={delegate}>\n        {TranslateString(999, 'Stake Delegate')}\n      </Button>\n    )\n\n  const renderButton = () => {\n    if(!account) {\n      return (\n        <UnlockButton mt=\"8px\" fullWidth />\n      )\n    }\n    if(!steem) {\n      return (\n      <Button mt=\"8px\" fullWidth onClick={redirectSteemKeychain}> Install Steem Keychain </Button>\n      )\n\n    }\n      return (\n        <Button mt=\"8px\" fullWidth disabled={requestedDelegate} onClick={delegate}>\n        {TranslateString(999, 'Stake Delegate')}\n      </Button>\n      )\n\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          RBS\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earning={harvest} account={account} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {farm.lpSymbol}\n        </Text>\n\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n\n      </Flex>\n      <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Heading color='text-disabled'>{staked}</Heading>\n      </Flex>\n\n      <Input\n        value={delegateAmount.toString()}\n        onChange={handleChange}\n\n      />\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Keychain is required to use SP Delegate Farm.')}\n        </Text>\n\n      {renderButton()}\n\n    </Action>\n  )\n}\n\nexport default CardActions\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchFarmUser.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchFarms.ts",["939"],"import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        console.log(tokenAmount)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'robiniaSwapPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\fetchPoolsUser.ts",["940","941"],"import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserDelegateFarmStakeBalances = async (account) => {\n  console.log(nonMasterPools)\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n\n  const res = await multicall(sousChefABI, calls)\n\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingRobinia('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\pools\\fetchPools.ts",["942","943","944","945","946","947","948","949","950","951"],"import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport delegateFarmAbi from 'config/abi/delegateFarm.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n  /*\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n \n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  }) */\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name : 'totalStakedAmount',\n      params: []\n    }\n  })\n  const nonBnbPoolsTotalStaked = await multicall(delegateFarmAbi, callsNonBnbPools)\n  // const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    /*\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })), */\n  ]\n}\n\nexport const fetchPoolsDepositFees = async () => {\n  const pools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n\n  const callsPools = pools.map((poolConfig) => {\n    return {\n      address : poolConfig.contractAddress[CHAIN_ID],\n      name : 'depositFeeBP',\n      params : []\n    }\n  })\n\n  const poolCalls = await multicall(delegateFarmAbi,callsPools);\n  return [\n    ...pools.map((p,index) => ({\n      sousId : p.sousId,\n      depositFee : new BigNumber(poolCalls[index]).toJSON()\n    }))\n  ]\n}\n\nexport const fetchPoolsWithdrawalFees = async () => {\n  const pools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n\n  const callsPools = pools.map((poolConfig) => {\n    return {\n      address : poolConfig.contractAddress[CHAIN_ID],\n      name : 'getWithdrawalFeeLevels',\n      params : []\n    }\n  })\n  console.log('FETCH WITHDRAW FEE CALL BEFORE')\n  console.log(callsPools)\n  const poolCalls = await multicall(delegateFarmAbi,callsPools);\n  console.log('withdrawal fee vals')\n  console.log(poolCalls[0][0].toString())\n  console.log(poolCalls[0][1].toString())\n  console.log(poolCalls[0][2].toString())\n  return [\n    ...pools.map((p,index) => ({\n      sousId : p.sousId,\n      withdrawalFeeLevels : poolCalls[index]\n    }))\n  ]\n}\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\contracts.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardContribute.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\steemUtils.ts",["952","953","954","955","956","957","958"],"import delegate from 'config/abi/delegate.json'\nimport { AbiItem } from 'web3-utils'\nimport { createSlice } from '@reduxjs/toolkit'\nimport { getDelegateContractAddress } from 'utils/addressHelpers'\nimport DelegateFarms from 'config/constants/delegateFarms'\nimport BigNumber from 'bignumber.js'\nimport multicall from 'utils/multicall'\nimport { getContract, getWeb3 } from 'utils/web3';\n\nexport async function sendTransaction(amount,dest,bsc,keychain) {\n    return new Promise((resolve,reject) => {\n        keychain.requestTransfer('',dest,amount,`fee for ${bsc}`,'STEEM',function(res) {\n            resolve(res)\n        },false)\n    })\n}\n\nexport async function sendDelegate(from,amount,dest,keychain) {\n    return new Promise((resolve,reject) => {\n        keychain.requestDelegation(from,dest,amount,'SP',function(res) {\n            console.log(res)\n            resolve(res)\n        })\n    })\n}\n\nexport function toSteem(amount) {\n    return `${amount.toFixed(3).replace(',','.')}`\n}\n\nexport function getDelegateContract(address) {\n        const contract = getContract(delegate,address);\n        return contract;\n}\nexport const harvest = async (account: string) => {\n    const web3 = getWeb3();\n    const contract = new web3.eth.Contract((delegate as unknown) as AbiItem,getDelegateContractAddress())\n    // const masterChefAdress = getDelegateContractAddress()\n    // const contract = getDelegateContract(masterChefAdress)\n    await contract.methods.harvest().send({from : account})\n}\n\nexport const fetchDelegateUserStaked = async (account: string) => {\n  const masterChefAdress = getDelegateContractAddress()\n\n  const calls = DelegateFarms.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(delegate, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\farms.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\pools.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\HarvestAction.tsx",["959","960","961","962","963","964","965","966","967","968"],"import React, { useState, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@macist-m/robinia-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvestDelegate } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getContract, getWeb3 } from 'utils/web3';\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\nimport { getDelegateContract, harvest} from '../../../../utils/steemUtils';\nimport { getDelegateContractAddress } from '../../../../utils/addressHelpers';\n\ninterface FarmCardActionsProps {\n  earning?: number\n  pid?: number\n  account?: string\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earning, pid, account }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const contract = useMemo(() => {\n    return getDelegateContract(getDelegateContractAddress());\n  },[])\n  const rawEarningsBalance = earning\n    const { onReward } = useHarvestDelegate()\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading  color='text-disabled'>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        <Button\n          disabled={rawEarningsBalance === 0}\n          onClick={async () => {\n            \n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\ifo.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\erc20.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getLiquidityUrlPathParts.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useApprove.ts",["969"],"import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve, approveWithAddress } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useDelegateFarmContract } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// lpContract olarak approve verilecek tokenin adresi gelmeli\nexport const usePoolApprove = (lpContract : Contract, delegateFarm: string, poolId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const delegateFarmContract = useDelegateFarmContract(delegateFarm);\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approveWithAddress(lpContract, delegateFarm, account)\n      dispatch(updateUserAllowance(poolId,account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, delegateFarm, poolId])\n\n  return { onApprove : handleApprove}\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Tags.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Balance.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useStake.ts",["970"],"import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb, stakeDelegateFarm } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useDelegateFarmContract } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  console.log(account)\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount,account, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\n// parametre olarak farmContract addresi gelmeli.\nexport const usePoolStake = (sousId, farmContract) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const delegateFarmContract = useDelegateFarmContract(farmContract)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stakeDelegateFarm(delegateFarmContract, amount, account)\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId,account))\n    },\n    [account, dispatch, sousId, delegateFarmContract],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\TokenInput\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\multicall.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\UnlockButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\ContributeModal.tsx",["971","972"],"import React, { useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { Modal, Button, Flex, LinkExternal } from '@macist-m/robinia-uikit'\nimport BalanceInput from 'components/Input/BalanceInput'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface Props {\n  currency: string\n  contract: any\n  currencyAddress: string\n  onDismiss?: () => void\n}\n\nconst ContributeModal: React.FC<Props> = ({ currency, contract, currencyAddress, onDismiss }) => {\n  const [value, setValue] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const balance = getFullDisplayBalance(useTokenBalance(currencyAddress))\n console.log(currencyAddress)\n console.log(currency)\n  return (\n    <Modal title={`Contribute ${currency}`} onDismiss={onDismiss}>\n      <BalanceInput\n        value={value}\n        onChange={(e) => setValue(e.currentTarget.value)}\n        symbol={currency}\n        max={balance}\n        onSelectMax={() => setValue(balance.toString())}\n      />\n      <Flex justifyContent=\"space-between\" mb=\"24px\">\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss} mr=\"8px\">\n          Cancel\n        </Button>\n        <Button\n          fullWidth\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await contract.methods\n              .deposit(new BigNumber(value).times(new BigNumber(10).pow(18)).toString())\n              .send({ from: account })\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n      <LinkExternal\n        href=\"https://pancakeswap.finance/add/0xAfAEEe58a58867c73245397C0F768FF041D32d70/BNB\"\n        style={{ margin: 'auto' }}\n      >\n        {`Get ${currency}`}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\LabelButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\WithdrawModal.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\components\\DepositModal.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useAllowance.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ModalActions\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\compoundApyHelpers.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useHarvest.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Label\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useUnstake.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\TokenInput\\TokenInput.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\config\\constants\\delegateFarms.ts",[],["973","974","975","976","977"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\callHelpers.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\ModalActions\\ModalActions.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Label\\Label.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\BalanceInput.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Input\\Input.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Spacer\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Spacer\\Spacer.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardTime.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDetails.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDescription.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardHeader.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Ifos\\components\\IfoCard\\IfoCardProgress.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\DetailsSection.tsx",["978","979","980","981"],"import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@macist-m/robinia-uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://pancakeswap.finance/swap/0x382d36e85178f2d3fd84e336d4e1d442fce78e8e`\n              : `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex> */}\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\DelegateFarm\\components\\FarmCard\\CardHeading.tsx",["982","983","984","985","986","987","988"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@macist-m/robinia-uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  console.log(farmImage)\n\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={80} height={80} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\Socials.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\FarmingCard.tsx",["989","990","991","992","993","994","995"],"import React, { useMemo, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport { Image } from '@macist-m/robinia-uikit'\nimport { QuoteToken } from 'config/constants/types'\nimport Divider from 'views/Farms/components/Divider'\nimport CardValue from './CardValue'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmingCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  return (\n    <div className=\"grid grid-cols-3 sm:gap-10 md:gap-24  lg:gap-20 \">\n       <div className = \"grid grid-cols-2\">\n       <Image\n        src={`/images/farms/${farmImage}.png`}\n        alt={farmImage}\n        width={55}\n        height={55}\n        marginTop=\"5px\"\n        marginBottom=\"15px\"\n      />\n       <div className=\"text-white mb-4\">{farm.lpSymbol}</div>\n\n       </div>\n    \n\n        <div className=\"grid-cols-1\">\n        APR\n            <div className=\"text-primary font-bold text-lg\">{farmAPY}% </div>\n        </div>\n      <Link className=\"bg-white sm:mr-12 px-3 py-3 w-28 h-10 rounded-xl text-center text-purple-900 cursor-pointer hover:opacity-75 \" to=\"/farms\">\n       Start Farm\n      </Link>\n          \n        </div>\n    \n    \n    \n  )\n}\n\nexport default FarmingCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useFarmsWithBalance.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Announcements.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\hooks\\useWeb3.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeStats.tsx",["996","997"],"import React from 'react'\nimport Slider from 'react-slick'\n\nconst TopSliderCard = () => {\n  const sliderSettings = {\n    dots: true,\n    infinite: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: false,\n    speed: 750,\n    autoplaySpeed: 5000,\n    arrows: false,\n  }\n\n  return (\n    <div className=\"ml-20 h-full relative\" style={{ minHeight: 400 , minWidth:350 }}>\n    \n          <img src=\"/images/image-1.png\" alt=\"trend-up\" width=\"498,19\"  />\n    \n      \n    </div>\n  )\n}\n\nexport default TopSliderCard\n",["998","999","1000","1001","1002"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\FarmStakingCard.tsx",["1003","1004","1005","1006","1007","1008","1009"],"import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@macist-m/robinia-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  console.log(account)\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <div className=\"rbs-card h-full   grid sm:grid-cols-3 md:grid-cols-3  gap-4 \">\n      \n      <div className=\"text-md text-purple-900 col-span-2 font-bold mb-6\">Farms & Staking</div>\n\n      <div> </div>\n\n      <div> \n        <div className=\"grid grid-cols-3 sm:gap-16 md:gap-0  mt-2\">\n          <img src=\"/images/w-token.svg\" style={{ maxHeight: 60 , maxWidth:80 }} alt=\"rbs-ico\"  />\n          <div className=\"max-h-full \" >\n         <img src=\"/images/metamask+.svg\" style={{ minHeight: 70 , maxWidth:80 }} alt=\"rbs-ico\"  />\n         </div>\n        </div>\n    \n      <div className=\"mt-4\">\n        {account ? (\n          <Button\n            id=\"harvest-all\"\n            disabled={balancesWithValue.length <= 0 || pendingTx}\n            onClick={harvestAllFarms}\n            fullWidth\n          >\n            {pendingTx\n              ? TranslateString(548, 'Collecting Robinia')\n              : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n          </Button>\n        ) : (\n          <UnlockButton fullWidth />\n        )}\n      </div>\n      </div>\n\n      <div className=\" text-white ml-6\">\n        <span>Wisteria to Harvest</span>\n        <CakeHarvestBalance earningsSum={earningsSum} />\n        <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n      </div>\n\n\n      <div className=\"mt-0 ml-6 text-white\">\n        <span>Wisteria in Wallet</span>\n        <CakeWalletBalance cakeBalance={cakeBalance} />\n        <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n      </div>\n\n\n      \n\n      \n\n      \n    </div>\n\n    // <StyledFarmStakingCard>\n    //   <CardBody>\n    //     <Heading size=\"xl\" mb=\"24px\">\n    //       {TranslateString(542, 'Farms & Staking')}\n    //     </Heading>\n    //     <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n    //     <Block>\n    //       <Label>{TranslateString(544, 'EGG to Harvest')}</Label>\n    //       <CakeHarvestBalance earningsSum={earningsSum}/>\n    //       <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n    //     </Block>\n    //     <Block>\n    //       <Label>{TranslateString(546, 'EGG in Wallet')}</Label>\n    //       <CakeWalletBalance cakeBalance={cakeBalance} />\n    //       <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n    //     </Block>\n    //     <Actions>\n    //       {account ? (\n    //         <Button\n    //           id=\"harvest-all\"\n    //           disabled={balancesWithValue.length <= 0 || pendingTx}\n    //           onClick={harvestAllFarms}\n    //           fullWidth\n    //         >\n    //           {pendingTx\n    //             ? TranslateString(548, 'Collecting EGG')\n    //             : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n    //         </Button>\n    //       ) : (\n    //         <UnlockButton fullWidth />\n    //       )}\n    //     </Actions>\n    //   </CardBody>\n    // </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CardValue.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\getTimePeriods.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\components\\Partials\\TopSocial.tsx",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeWalletBalance.tsx",["1010","1011","1012"],"import React from 'react'\nimport { Text } from '@macist-m/robinia-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\CakeHarvestBalance.tsx",["1013","1014"],"import React from 'react'\nimport { Text } from '@macist-m/robinia-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Enterance.tsx",["1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026"],"import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Farm } from 'state/types'\nimport { QuoteToken } from 'config/constants/types'\nimport Slider from 'react-slick'\nimport { provider } from 'web3-core'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, useTotalValue } from 'state/hooks'\nimport CardValue from 'views/Home/components/CardValue'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useBurnedBalance, useTotalSupply } from 'hooks/useTokenBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport styled from 'styled-components'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n}\n\nconst Enterance = () => {\n  const totalValue = useTotalValue()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const marketCap = eggPrice.times(circSupply)\n  const cakePriceUsd = usePriceCakeBusd()\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakeSupply = getBalanceNumber(circSupply)\n  const sliderSettings = {\n    dots: true,\n    infinite: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: false,\n    speed: 750,\n    autoplaySpeed: 5000,\n    arrows: false,\n  }\n  const Container = styled.div`\n   display:block;\n  `\n  const Welcome = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n    text-align:center;\n    @media (max-width:766px) {\n      background:rgba(255,255,255,0.65);\n    }\n  `\n  const Flex = styled.div`\n    display: flex;\n  `\n  const Text = styled.div`\n  margin-bottom: ${(props) => props.property };\n  margin-right: ${(props) => props.property };\n  font-size:20px;\n  color: ${(props) => props.color };\n  `\n  const Values = styled.div`\n    background-color:  ${(props) => props.color }; \n    border:solid 1px transparent;\n    border-radius:5px;\n    text-align:center;\n    text-color:white;\n    min-width:150px;\n    min-height:30px;\n    margin: 10px 10px 10px 10px;\n    `\n\n  return (\n    <Flex>\n      <Welcome>\n        <img src=\"/images/welcome.png\" alt=\"welcome\" className='ml-auto mr-auto' />\n\n        <Text property='25px' color='#376c47' >2.0 (PVC) on BSC Network</Text>\n\n    <Flex>\n      <Container >\n      <Text color='#376c47'>Total Value Locked</Text>\n\n      \n        <Values color='#376c47'>\n\n          {totalValue.toNumber() > 0 ? (\n            <CardValue\n              value={totalValue.toNumber()}\n              prefix=\"$\"\n              decimals={2}\n              fontSize=\"18px\"\n              color='#fff'\n            />\n          ) : (\n            <CardValue value={0} prefix=\"$\" decimals={2} fontSize=\"18px\"  color='#fff'/>\n          )}\n        </Values>\n        </Container>\n        <Container>\n        <Text color='#2ca0b7'>SVT APY</Text>\n          <Values  color='#2ca0b7'>\n          \n          {totalValue.toNumber() > 0 ? (\n            <CardValue\n              value={totalValue.toNumber()}\n              prefix=\"$\"\n              decimals={2}\n              fontSize=\"18px\"\n              color='#fff'\n            />\n          ) : (\n            <CardValue value={0} prefix=\"$\" decimals={2} fontSize=\"18px\" color='#fff' />\n          )}\n        </Values>\n        </Container>\n        \n        </Flex>\n      </Welcome>\n    </Flex>\n  )\n}\n\nexport default Enterance\n\n\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\News.tsx",["1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport Slider from 'react-slick'\nimport Divider from 'views/Farms/components/Divider'\nimport { FarmWithStakedValue } from '../../Farms/components/FarmCard/FarmCard'\nimport TopFarmCard from './TopFarmCard'\nimport FarmingCard from './FarmingCard'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\nconst Container = styled.div`\ndisplay:block;\nmin-width:200px;\nmax-width:600px;\nmargin-bottom:10px;\nline-height: 1.4;\ntext-align:left;\nfont-size:24px;\n\n\n`\nconst Text = styled.text`\nfont-size:18px;\n\n`\nconst Box = styled.div`\nmin-height:385px;\npadding:60px;\nborder:1px solid transparent;\nborder-radius:25px;\nbackground-color:#fdf5d3;\ncolor:#8d694a;\n\n\n`\n\nconst News: React.FC<FarmsProps> = (farmsProps) => {\n  \n\n  return (\n    <Box>\n    <Container>\n      <a  href=\"https://steemit.com/wisteria/@robinia/2-0-wisteriaswap-12-18\">Metavill Swap Defi 1.0</a>\n      <br/>\n      <Text>\n        Corini Kindergarden youtube video for Korean\n      </Text>\n    </Container>\n    <Container>\n    <a  href=\"https://steemit.com/wisteria/@robinia/2-0-wisteriaswap-12-18\">Yield Farming DeFi 1.0</a>\n      <br/>\n      <Text>\n        Corini Kindergarden youtube video for Korean\n      </Text>\n      </Container>\n      <Container>\n    <a  href=\"https://steemit.com/wisteria/@robinia/2-0-wisteriaswap-12-18\">Metavill Swap Defi 1.0</a>\n      <br/>\n      <Text>\n        Corini Kindergarden youtube video for Korean\n      </Text>\n    </Container>\n\n  \n     \n    </Box>\n  )\n}\n\nexport default News\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Features.tsx",["1047","1048","1049","1050"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport bg from './bgcard.svg'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Text = styled.text`\r\n  font-size: ${(props) => props.fontSize};\r\n  color: #8d694a;\r\n  opacity: ${(props) => props.opacity};\r\n`\r\nconst Title = styled.text`\r\n  font-size: ${(props) => props.fontSize};\r\n  color: #8d694a;\r\n`\r\nconst Box = styled.div`\r\n  background-image: url(${bg});\r\n  background-color: #fdf5d3;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  color: #8d694a;\r\n  min-height: 285px;\r\n  padding: 60px;\r\n  width: 600px;\r\n  border: 1px solid white;\r\n  border-radius: 25px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: no-wrap;\r\n`\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  text-align: left;\r\n  justify-content: center;\r\n  margin-top: 40px;\r\n`\r\nconst Container = styled.div``\r\nconst FeaturesBoxes = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst News: React.FC<FarmsProps> = (farmsProps) => {\r\n  return (\r\n    <FeaturesBoxes>\r\n      <Text fontSize=\"36px\">Features</Text>\r\n\r\n      <Flex>\r\n        <Box>\r\n          <Container>\r\n            <Title fontSize=\"30px\">Auto Metavill</Title>\r\n            <Text opacity=\"0.6\" fontSize=\"20px\">\r\n              <br />\r\n              <br />\r\n              Metavill provides the best APY to users through Auto-Compounding system.\r\n            </Text>\r\n          </Container>\r\n\r\n          <img src=\"images/feature1.png\" alt=\"features\" className='sm:hidden md:block'/>\r\n        </Box>\r\n\r\n        <Box>\r\n          <Container>\r\n            <Text fontSize=\"30px\"> Treasury Fund</Text>\r\n\r\n            <Text opacity=\"0.6\" fontSize=\"20px\">\r\n              <br />\r\n              <br />\r\n              Treasury Fund designed to maintain the value of SWT. It activates the\r\n              Buy-Burn system using the Treasury Fund when the SWT value\r\n            </Text>\r\n          </Container>\r\n          <img src=\"images/feature2.png\" alt=\"features\" className='sm:hidden md:block'/>\r\n        </Box>\r\n      </Flex>\r\n    </FeaturesBoxes>\r\n  )\r\n}\r\n\r\nexport default News\r\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Home\\components\\Sitestat.tsx",["1051","1052","1053","1054","1055","1056"],"import React from 'react'\nimport CardValue from 'views/Home/components/CardValue'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport {\n  useTotalSupply,\n  useBurnedBalance,\n  useCustomTokenBalance,\n} from 'hooks/useTokenBalance'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { QuoteToken } from 'config/constants/types'\n\nimport {\n  useFarms,\n  usePriceCakeBusd,\n  useTotalValue,\n  usePriceBnbBusd,\n} from '../../../state/hooks'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst addToMetamask = function () {\n  window.ethereum\n    .request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20',\n        options: {\n          address: '0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7',\n          symbol: 'WST',\n          decimals: 18,\n          image: `${window.location.origin}/images/favicons/apple-icon-72x72.png`,\n        },\n      },\n    })\n    .then((success) => {\n      if (success) {\n        console.log('WST successfully added to wallet!')\n      } else {\n        throw new Error('Something went wrong.')\n      }\n    })\n    .catch(console.error)\n}\nconst Statistics = () => {\n  const cakePriceUsd = usePriceCakeBusd()\n  // const totalValue = useTotalValue()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const exacutedBalance = useCustomTokenBalance(\n    '0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7',\n    '0xf808b408e464FcaA2a28C673ca7F5C16f6e775aB',\n  )\n  const circSupply = totalSupply\n    ? totalSupply.minus(burnedBalance).minus(exacutedBalance)\n    : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n\n  const marketCap = eggPrice.times(circSupply)\n\n  let eggPerBlock = 0\n  if (farms && farms[0] && farms[0].eggPerBlock) {\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock)\n      .div(new BigNumber(10).pow(18))\n      .toNumber()\n  }\n  const x = []\n  farms.map((farm) => {\n    // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n    //   return farm\n    // }\n    const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n      .times(new BigNumber(farm.poolWeight))\n      .div(new BigNumber(10).pow(18))\n    const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n    let apy = eggPrice.times(cakeRewardPerYear)\n\n    let totalValuex = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      totalValuex = totalValuex.times(bnbPrice)\n    }\n\n    if (totalValuex.comparedTo(0) > 0) {\n      apy = apy.div(totalValuex)\n    }\n\n    x.push(apy)\n    return null\n  })\n  const topAPY = x.reduce(function (accumulatedValue, currentValue) {\n    return Math.max(accumulatedValue, currentValue)\n  })\n  const Container = styled.div`\n  margin-left:20px;\n  `\n\n  const Flex = styled.div`\n    display: flex;\n    flex-wrap:wrap;\n    text-align: left;\n    justify-content: space-evenly;\n    margin-top: 40px;\n    img{\n      margin-bottom:30px;\n    }\n\n  ` \n  const Text = styled.div`\n  margin-right: ${(props) => props.property };\n    color:#8d694a;\n    font-size:18px;\n    line-height:1.5;\n  `\n  const Stats = styled.div`\n  justify-content:space-around;\n  background-color:#f7f3e4;\n  background-size:contain;\n  border:solid 1px transparent;\n  border-radius:25px;\n  min-height:150px;\n  display: flex;\n  flex-wrap: wrap;\n  text-align: left;\n  margin-top: 40px;\n`\n\n  return (\n    <>\n    <Stats>\n      <Flex>\n        <Container>\n          <Text property='20px'>SWT APY</Text>\n          <Text >Total Supply</Text>\n          <Text >Circulating Supply</Text>\n        </Container>\n\n        <Container>\n        <CardValue fontSize=\"18px\" value={2} decimals={0} />\n\n        {cakeSupply && (\n                <CardValue\n                  fontSize=\"18px\"\n                  value={getBalanceNumber(totalSupply)}\n                  decimals={0}\n                />\n              )}\n\n           {cakeSupply && (\n                <CardValue fontSize=\"18px\" value={cakeSupply} decimals={0} />\n              )}\n\n        </Container>\n      </Flex>\n      <Flex>\n        <Container>\n          <Text >Total Burned</Text>\n          <Text >Market Cap</Text>\n          <Text >WST Per Block</Text>\n        </Container>\n\n        <Container  >\n        <CardValue\n                fontSize=\"17px\"\n                value={getBalanceNumber(burnedBalance)}\n                decimals={0}\n              />\n              \n              {totalSupply && (\n                <CardValue\n                  fontSize=\"17px\"\n                  value={getBalanceNumber(marketCap)}\n                  decimals={0}\n                  prefix='$'\n                />\n              )}\n           {cakeSupply && (\n                <CardValue fontSize=\"18px\" value={eggPerBlock} decimals={0} />\n              )}\n        </Container>\n\n      </Flex>\n\n      <Flex>\n              <img\n                style={{ minWidth: '60px', width: '70px' }}\n                src=\"/images/metamask-ico.svg\"\n                alt=\"rbs-ico\"\n              />\n              <button\n                type=\"button\"\n                style={{ minWidth: '135px' , maxHeight:'50px' }}\n                className=\"bg-meta  ml-4    rounded-xl sm:mt-2   text-sm  text-white cursor-pointer hover:opacity-75\"\n                onClick={addToMetamask}\n              >\n                Add to Metamask\n              </button>\n          </Flex>\n      </Stats>\n\n     \n    </>\n  )\n}\n\nexport default Statistics\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\CallOption\\ClaimedButtons\\index.tsx",["1057","1058","1059","1060"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ClaimButton = ({ claimedOnly, setClaimedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      \r\n      <ButtonMenu  activeIndex={isExact ? 0 : 1} size=\"sm\"  variant=\"primary\">\r\n        <ButtonMenuItem className='mr-4' as={Link} to={`${url}`}>\r\n          {TranslateString(10006, 'Claimable')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(10007, 'Claimed')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 12px;\r\n  }\r\n`","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchVaultPublic.ts",["1061"],"import BigNumber from 'bignumber.js'\n// import { convertSharesToCake } from 'views/Pools/helpers'\nimport multicall from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO ,BIG_TEN} from 'utils/bigNumber'\n\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\n}\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = [\n      'getPricePerFullShare',\n      'totalShares',\n      'calculateHarvestCakeRewards',\n      'calculateTotalPendingBuzzRewards',\n    ].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [sharePrice, shares, estimatedRobiniaBountyReward, totalPendingRobiniaHarvest] = await multicall(\n      cakeVaultAbi,\n      calls,\n    )\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalRobiniaInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalRobiniaInVault: totalRobiniaInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedRobiniaBountyReward: new BigNumber(estimatedRobiniaBountyReward.toString()).toJSON(),\n      totalPendingRobiniaHarvest: new BigNumber(totalPendingRobiniaHarvest.toString()).toJSON(),\n    }\n  } catch (error) {\n    console.log(error)\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicall(cakeVaultAbi, calls)\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\state\\farms\\fetchVaultUser.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\utils\\bigNumber.ts",["1062"],"import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const BIG_ZERO = new BigNumber(0)\nexport const BIG_ONE = new BigNumber(1)\nexport const BIG_NINE = new BigNumber(9)\nexport const BIG_TEN = new BigNumber(10)\n\n// export const ethersToSerializedBigNumber = (ethersBn: ethers.BigNumber): SerializedBigNumber =>\n//   ethersToBigNumber(ethersBn).toJSON()\n\n// export const ethersToBigNumber = (ethersBn: ethers.BigNumber): BigNumber => new BigNumber(ethersBn.toString())\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\index.ts",[],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\Dashboard.tsx",["1063"],"import React,{ useState,useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport Page from 'components/layout/Page'\nimport { Text,Flex } from '@macist-m/robinia-uikit'\nimport { BLOCKS_PER_YEAR,BSC_BLOCK_TIME} from 'config'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useFarmFromPid,usePriceCakeBusd,useCakeVault,useFetchCakeVault} from 'state/hooks'\nimport { useTotalSupply, useBurnedBalance ,useCustomTokenBalance} from 'hooks/useTokenBalance'\nimport useBlock from 'hooks/useBlock'\nimport Web3 from 'web3'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getAutoAprDataWithDay } from 'views/Farms/helpers'\nimport moment from 'moment'\nimport ChartCard from './ChartCard'\nimport TresuaryTokens from './TresuaryTokens'\n\n\n\n\n\nconst CustomFlexContainer = styled.div`\n  display:flex;\n  \n  max-width:882px;\n  justify-content:space-between;\n  width:100%;\n  padding:16px;\n  flex-wrap:wrap;\n  @media only screen and (max-width: 952px) {\n    padding:0 16px;\n  }\n\n\n`\nconst Container = styled.div`\n  width:100%;\n  flex-direction:column;\n  padding: 50px;\n  border-radius: 23px;\n  backdrop-filter: blur(30px);\n  background-color:rgba(212, 243, 250,0.4);\n  border:1px solid;\n  border-color:rgba(255, 255, 255, 0.5);\n  margin-bottom:16px;\n\n\n`\n\n\nconst TitleContainer =styled.div`\nmin-width:calc(25% - 8px);\n@media only screen and (max-width: 762px) {\n  width:100%;\n}\n`\nconst Dashboard: React.FC = () => {\n   const { account }: { account: string } = useWallet()\n   const [chartData,setChartData]=useState(null)\n    const currentBlock = useBlock()\n    const startBlock = currentBlock - (28880 * 60)\n\n    const fecthUrl = `https://api.wisteriaswap.com/getHistory/${startBlock}/${currentBlock}`\n   const tvlDesc = \"Total Value Locked, is the dollar amount of all WST staked in the protocol. This metric is often used as growth or health indicator in DeFi projects.\"\n   const tresuaryDesc = \"Market Value of Treasury Assets, is the sum of the value (in dollars) of all assets held by the treasury.\"\n   const priceDesc = \"Market Value of Wst token.\"\n   const stakersDesc = \"Stakers, is the total number of WST token holders.\"\n   const stakedDesc = \"WST Staked, is the ratio of WST to WST. (staked vs unstaked)\"\n   const runwayDesc = \"Runway, is the number of days WST emissions can be sustained at a given rate. Lower APY = longer runway\"\n   const protokolDesc = \"Protocol Owned Liquidity, is the amount of LP the treasury owns and controls. The more POL the better for the protocol and its users.\"\n   useFetchCakeVault(account)\n   const farm = useFarmFromPid(2)\n   const cakePrice = usePriceCakeBusd()\n   const {\n    fees: { performanceFee }\n  } = useCakeVault()\n\n    const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n    .times(new BigNumber(farm.poolWeight))\n    .div(new BigNumber(10).pow(18))\n    const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n    let apy = cakePrice.times(cakeRewardPerYear)\n    const totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n    if (totalValue.comparedTo(0) > 0) {\n    apy = apy.div(totalValue)\n    }\n    const totalSupply = useTotalSupply()\n    const burnedBalance = useBurnedBalance(getCakeAddress())\n    const exacutedBalance= useCustomTokenBalance(\"0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7\",\"0xf808b408e464FcaA2a28C673ca7F5C16f6e775aB\")\n    const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(exacutedBalance) : new BigNumber(0)\n\n   const marketCap = getBalanceNumber(cakePrice.times(circSupply)).toLocaleString(\"ko-KR\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n   const farmApy = getAutoAprDataWithDay(apy.times(100).toNumber(),performanceFee,365).apr.toLocaleString(\"ko-KR\", {\n       minimumFractionDigits: 2,\n       maximumFractionDigits: 2,\n   })\n   const getTimeStamp  = (block) =>{\n    const secodsfromNow = (currentBlock - block ) * BSC_BLOCK_TIME\n    const currentTimestamp = Math.floor(Date.now() / 1000)\n\n    const blockTimestamp = currentTimestamp - secodsfromNow\n\n    return moment.unix(blockTimestamp).format(\"MMM Do\")\n\n\n }\n    const tresuaryChartData=[]\n    let tvlData=[]\n    if(chartData !== null && chartData.length > 0){\n       tvlData =\n      chartData.map(item =>{\n        const wstCount =  parseInt(Web3.utils.fromWei(item.tvl))\n        const price =(item.wisteriaPrice) ? parseFloat(item.wisteriaPrice) : 0\n        const volume = wstCount * 100 / getBalanceNumber(circSupply)\n\n        const timestamp =  getTimeStamp(item.endBlock)\n        let fund = 0\n        const tresuary = (item.treasuryTokens ) ? item.treasuryTokens.map\n        (token => {\n           let tokenTotalBalance = token.tokenPrice ? token.tokenPrice * parseInt(Web3.utils.fromWei(token.totalBalance)) : 0\n           const tresuaryToken = TresuaryTokens.find(x=>x.address === token.tokenAddress)\n            const tokenName=( tresuaryToken) ? tresuaryToken.name : token.tokenAddress\n            if(tokenName === \"WSTBNB\" || tokenName === \"WSTBUSD\"){\n              tokenTotalBalance = (parseFloat(Web3.utils.fromWei(token.totalBalance)) * 100) / parseFloat(Web3.utils.fromWei(token.totalSupply))\n            }\n            fund = tokenTotalBalance + fund\n           return {[tokenName]:tokenTotalBalance}\n          }\n\n          ) : []\n          const sampleObj =  {\n            ETH: 0,\n            BTCB: 0,\n            CAKE: 0,\n            BNB: 0,\n            BUSD: 0,\n            USDT:0,\n            WSTBUSD:100,\n            WSTBNB:100,\n            timestamp,\n            totalTresuaryBalance:fund\n\n          }\n          const resuaryObj= Object.assign(sampleObj, ...tresuary)\n        tresuaryChartData.push(resuaryObj)\n\n\n\n\n\n\n        const totalFund = fund\n\n\n       const realCirculatingSupply = (item.circulatingSupply) ?  parseInt(Web3.utils.fromWei(item.circulatingSupply)): parseInt(Web3.utils.fromWei(item.totalSupply))\n        const runway =(totalFund > 0) ?  (totalFund -  realCirculatingSupply )/ 1440 : 0\n        let  volumeAsNumber;\n          try {\n            volumeAsNumber =  parseInt(Web3.utils.fromWei(item.volume))\n          } catch (error) {\n            volumeAsNumber = parseInt(Web3.utils.fromWei(\"0\"))\n          }\n        const tvlAsNumber = wstCount * cakePrice.toNumber()\n\n       return {\n        volume:volumeAsNumber,\n        tvl:tvlAsNumber,\n        staked:volume,\n        block:item.endBlock,\n        stakers:item.stakers,\n        timestamp,\n        price,\n        runway,\n        totalTresuaryBalance:totalFund,\n        tresuary\n      }\n      })\n\n    }\n\n\n\n\n\n      useEffect(()=>{\n         fetch(fecthUrl).then(response => response.json())\n         .then(data => setChartData(data))\n\n      },[fecthUrl])\n\n  return (\n    <Page>\n    <Container>\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" flexWrap=\"wrap\">\n        <TitleContainer>\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" >\n                    <Text fontSize='22px' color=\"#4F94A1\">WST price</Text>\n                    <Text bold fontSize='25px' color=\"#4F94A1\" >${cakePrice.toNumber().toFixed(2)}</Text>\n                </Flex>\n        </TitleContainer>\n        <TitleContainer>\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\"  >\n                    <Text fontSize='22px' color=\"#4F94A1\">\n                    Market Cap\n                    </Text>\n                    <Text bold fontSize='25px' color=\"#4F94A1\">\n                        ${marketCap}\n                    </Text>\n                </Flex>\n        </TitleContainer>\n        <TitleContainer>\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n                    <Text fontSize='22px' color=\"#4F94A1\">\n                        Apy\n                    </Text>\n                    <Text bold fontSize='25px' color=\"#4F94A1\">{farmApy}%</Text>\n                </Flex>\n        </TitleContainer>\n        {/* <TitleContainer>\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n                    <Text fontSize='22px' color=\"secondary\">\n                    Backing per $WST\n                    </Text>\n                    <Text bold fontSize='25px' color=\"#fff\">$258</Text>\n                </Flex>\n        </TitleContainer> */}\n\n\n\n\n            </Flex>\n    </Container>\n\n\n    <Flex alignItems=\"center\" flexDirection=\"column\" justifyContent=\"center\">\n        <CustomFlexContainer>\n            <ChartCard available={false}  dataKey=\"tvl\" title='Total Value Locked' desc={tvlDesc} prefix=\"$\" chartData={tvlData}/>\n            <ChartCard available={false} prefix='$' dataKey=\"price\" title='WST Price' desc={priceDesc} chartData={tvlData}/>\n        </CustomFlexContainer>\n        <CustomFlexContainer>\n            <ChartCard available={false} prefix='$' dataKey=\"tresuary\" title=\"Tresuary Balance\" desc={tresuaryDesc} chartData={tresuaryChartData}/>\n            <ChartCard available={false} prefix='%' dataKey=\"staked\" title=\"WST Staked\" desc={stakedDesc} chartData={tvlData}/>\n        </CustomFlexContainer>\n        <CustomFlexContainer>\n          <ChartCard available={false} prefix='' dataKey=\"runway\" title=\"Runway\" desc={runwayDesc} chartData={tvlData}/>\n          <ChartCard available={false} prefix='%' dataKey=\"protokol\" title=\"Protocol Owned Liquidity\" desc={protokolDesc} chartData={tresuaryChartData}/>\n        </CustomFlexContainer>\n\n    </Flex>\n\n<div className='mb-20'/>\n\n    </Page>\n  )\n}\n\nexport default Dashboard","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\TresuaryTokens.js",[],["1064","1065","1066","1067","1068"],"C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\ChartCard.tsx",["1069","1070","1071","1072","1073"],"import React from 'react'\n\nimport styled from 'styled-components'\nimport { Text,Flex ,useModal,Skeleton} from '@macist-m/robinia-uikit'\nimport ChartModal from './ChartModal'\nimport Chart from './Chart'\n\n\n\n\n\nexport const ChartCardContainer = styled.div`\n  display: flex;\n  width: calc(50% - 16px);\n  height:130px;\n  border-radius:17px;\n  background:#4F94A1;\n\n  justify-content: center;\n  position: relative;\n  flex-direction:column;\n  @media only screen and (max-width: 982px) {\n    width: 100%;\n    max-width:762px;\n    margin-bottom:16px\n  }\n`;\n\nconst IconContainer = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    border-radius:${props => props.style ? props.style.border : \"6px\"};\n    width:${props => props.style ? props.style.width : \"20px\"};\n    height:${props => props.style ? props.style.height : \"20px\"};\n    background-color:rgba(255,255,255,0.1);\n    backdrop-filter:blur(30px);\n    margin-left:${props => props.style ? props.style.marginLeft : \"0\"};\n`\nconst ChartAreaContainer =styled.div`\n    width:100%;\n    height:160px;\n    margin-left:-10px;\n    margin-top:16px;\n\n`\nconst ChartHeaderContainer =styled.div`\n    display:flex;\n   // height:74px;\n    width:100%;\n    align-items:center;\n    flex-direction:column;\n    padding:0 22px;\n\n`\nconst ChartHeaderTop =styled.div`\n    display:flex;\n    width:100%;\n    justify-content:center;\n    align-items:center;\n    height:28px;\n\n`\nconst Text2 =styled(Text)`\n  \n@media only screen and (max-width:760px) {\n  font-size:20px;\n}\n\n`\nconst Title =styled(Text)`\n  \n@media only screen and (max-width:760px) {\n  font-size:20px;\n}\n\n`\n\n  const Tooltiptext =styled.div`\n  visibility: hidden;\n  width:180px;\n  padding:8px 16px;\n  border-radius:16px;\n  color:white;\n  background-color:rgba(0,0,0,0.1);\n  backdrop-filter:blur(3px);\n  border:1px solid rgb(27,34,58,0.4);\n  text-align: center;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -60px;\n  opacity: 0;\n  transition: opacity 0.3s;\n  &:after{\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #93a0c1 transparent transparent transparent;\n  }\n  `\n  const Tooltip =styled.div`\n  position: relative;\n  display: inline-block;\n  &:hover ${Tooltiptext} {\n    visibility: visible;\n    opacity: 1;\n    }\n`\ninterface ChartCardProps {\n    chartData:any\n    desc?:string\n    prefix?:string\n    title?:string\n    dataKey:string\n    available?:boolean\n}\nconst ChartCard: React.FC<ChartCardProps>  = ({chartData,title,desc,prefix,dataKey,available}) => {\nlet curretValue\nswitch (dataKey) {\n  case \"tvl\":\n      curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-1].tvl) ? (chartData[chartData.length-1].tvl).toLocaleString(\"ko-KR\", {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }) : 0\n    break;\n    case \"stakers\":\n      curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-1].stakers) ? (chartData[chartData.length-1].stakers).toLocaleString(\"ko-KR\", {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }) : 0\n    break;\n    case \"staked\":\n      curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-10].staked) ? `${(chartData[chartData.length-10].staked).toLocaleString(\"ko-KR\", {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      })}` : 0\n    break;\n    case \"price\":\n      curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-1].price) ? `${(chartData[chartData.length-1].price).toLocaleString(\"ko-KR\", {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      })}` : 0\n    break;\n    case \"runway\":\n      curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-10].runway) ? `${(chartData[chartData.length-10].runway).toLocaleString(\"ko-KR\", {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      })} Days` : 0\n    break;\n     case \"tresuary\":\n       curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-10].totalTresuaryBalance) ? `${(chartData[chartData.length-10].totalTresuaryBalance).toLocaleString(\"ko-KR\", {\n         minimumFractionDigits: 0,\n         maximumFractionDigits: 0,\n       })}` : 0\n     break;\n     break;\n     case \"protokol\":\n       curretValue =(chartData && chartData.length > 0 && chartData[chartData.length-10].WSTBUSD) ? `${(chartData[chartData.length-10].WSTBUSD).toLocaleString(\"ko-KR\", {\n         minimumFractionDigits: 0,\n         maximumFractionDigits: 0,\n       })}` : 0\n     break;\n  default:\n    curretValue = 0\n    break;\n}\n\nconst [onPresentChart] = useModal(\n<ChartModal currentValue={curretValue} dataKey={dataKey} title={title} prefix={prefix} desc={desc} data={chartData} />,\n)\n\n\n\n// if (!(chartData && chartData.length > 0)) {\n//   return <ChartCardContainer>\n//     <Flex alignItems=\"center\" justifyContent=\"center\">\n//       <img src={`${window.location.origin}/images/loading.gif`} alt=\"\" />\n//     </Flex>\n//     </ChartCardContainer>\n// }\n\n  return (\n\n        <ChartCardContainer>\n        <ChartHeaderContainer>\n        <ChartHeaderTop>\n            <Flex alignItems=\"center\">\n                <Title color='#fff' fontSize='18px' style={{opacity:\"0.8\",lineHeight:1,verticalAlign:\"middle\"}}>\n                {title}\n                </Title>\n                <Tooltip>\n                \n                <Tooltiptext>\n                {desc}\n                </Tooltiptext>\n                </Tooltip>\n\n            </Flex>\n            {/* <IconContainer onClick={(available) ? onPresentChart : null}>\n            <img  src={`${window.location.origin}/images/expandCoolBg.svg`} alt=\"\" />\n            </IconContainer> */}\n        </ChartHeaderTop>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          {(parseFloat(curretValue) > 0) ?\n            <Text2 color='#fff' fontSize='24px' bold style={{opacity:\"1\",lineHeight:1,verticalAlign:\"middle\"}}>\n            {prefix +curretValue}\n            </Text2>\n          :\n          <Skeleton height={24} width={80} />\n          }\n\n        <Text  color='#8aa3fd' fontSize='24px' bold style={{opacity:\"1\",lineHeight:1,verticalAlign:\"middle\",marginLeft:\"16px\"}}>\n        Now\n        </Text>\n        </Flex>\n        </ChartHeaderContainer>\n        {/* {(available) ?\n                <ChartAreaContainer>\n                {!(chartData && chartData.length > 0) ?\n                    <Flex alignItems=\"center\" justifyContent=\"center\">\n                      <img src={`${window.location.origin}/images/loading.gif`} alt=\"\" />\n                    </Flex>\n                :\n                     <Chart currentValue={curretValue} dataKey={dataKey} prefix={prefix} data={chartData} />\n\n                }\n\n              </ChartAreaContainer>\n              :\n              <ChartAreaContainer>\n                <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                  <Text fontSize='18px'>\n                    Chart data will be available soon...\n                  </Text>\n                  </Flex>\n              </ChartAreaContainer>\n\n        }\n */}\n\n        </ChartCardContainer>\n  )\n}\n\nexport default ChartCard\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Farms\\helpers.tsx",["1074","1075","1076","1077","1078"],"import BigNumber from 'bignumber.js'\nimport { BIG_TEN } from 'utils/bigNumber'\n// import { DeserializedPool } from 'state/types'\n// import { getApy } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance} from 'utils/formatBalance'\n\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n    return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n  }\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 1\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\n\n//  export const getAprData = (pool: DeserializedPool, performanceFee: number) => {\n//    const { isAutoVault, apr } = pool\n\n//     //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n//    const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\n\n//    if (isAutoVault) {\n//      const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\n//      return { apr: autoApr, autoCompoundFrequency }\n//    }\n//    return { apr, autoCompoundFrequency }\n//  }\n export const getAutoAprData = (apr: number, performanceFee: number) => {\n\n    // console.log(apr)\n    // console.log(performanceFee)\n   //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n    const autoCompoundFrequency = AUTO_VAULT_COMPOUND_FREQUENCY\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 10\n    const autoApr1 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 1, performanceFee) * 10\n    const autoApr7 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 7, performanceFee) * 10\n    const autoApr30 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 30, performanceFee) * 10\n    return { apr: autoApr, autoCompoundFrequency ,autoApr1,autoApr7,autoApr30}\n\n\n}\nexport const getAutoAprDataWithDay = (apr: number, performanceFee: number,day: number) => {\n\n  // console.log(apr)\n   console.log(performanceFee)\n //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const autoCompoundFrequency = AUTO_VAULT_COMPOUND_FREQUENCY\n  const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, day, performanceFee) * 100\n  return { apr: autoApr, autoCompoundFrequency }\n\n\n}\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365\n  const aprAsDecimal = apr / 100\n\n  const timesCompounded = 365 * compoundFrequency\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + (aprAsDecimal / timesCompounded)) ** (timesCompounded * daysAsDecimalOfYear) - 1\n  }\n  if (performanceFee) {\n\n    const performanceFeeAsDecimal = performanceFee / 10000\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\n    apyAsDecimal -= takenAsPerformanceFee\n  }\n  if(apyAsDecimal < 0){\n    apyAsDecimal*=-1\n  }\n  return apyAsDecimal\n}\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n  tokenTaxRate:string,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const excludeTax = cakeAtLastUserAction\n  // if(new BigNumber(tokenTaxRate).toNumber() > 0){\n  //   excludeTax = cakeAtLastUserAction.minus(cakeAtLastUserAction.times(new BigNumber(tokenTaxRate).toNumber()/10000))\n  // }\n  const autoCakeProfit = cakeAsBigNumber.minus(excludeTax)\n  // alert(-autoCakeProfit.gte(0))\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  // console.log(`cakeAsBigNumber:${cakeAsBigNumber}`)\n  // console.log(`cakeAtLastUserAction:${cakeAtLastUserAction}`)\n  // console.log(`excludeTax:${excludeTax}`)\n  // console.log(`userShares:${userShares}`)\n  // console.log(`pricePerFullShare:${pricePerFullShare}`)\n  // console.log(`earningTokenPrice:${earningTokenPrice}`)\n  // console.log(`autoCakeProfit:${autoCakeProfit}`)\n\n  // console.log(`autoCakeToDisplay:${autoCakeToDisplay}`)\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay ,cakeAsBigNumber}\n}\n\n// export const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\n//   const { startBlock, endBlock, isFinished } = pool\n//   const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n//   const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n//   const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n//   const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n//   const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n//   return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n// }\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\ChartModal.tsx",["1079"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@macist-m/robinia-uikit'\nimport Chart from './Chart'\n\n\ninterface ChartModalProps {\n  onDismiss?: () => void\n  title:string,\n  desc:string,\n  data:any,\n  prefix?:string\n  dataKey:string\n  currentValue?:string\n}\n\nconst ChartAreaContainer = styled.div`\n      width:100%;\n      height:160px;\n      min-width:640px;\n      @media only screen and (max-width: 762px) {\n        min-width:100%;\n      }\n`\nconst DescArea = styled.div`\n  max-width:662px;\n  padding:16px;\n  border-radius:16px;\n  width:100%;\n  background-color:#1d2346ad;\n  margin-top:16px;\n\n\n`\n\n\nconst ChartModal: React.FC<ChartModalProps> = ({\n  onDismiss,\n   title,\n   desc,\n   data,\n   prefix,\n   dataKey,\n   currentValue\n}) => {\n\n\n  return (\n    <Modal title={title} onDismiss={onDismiss}>\n        <Flex marginBottom={3} alignItems=\"center\">\n        <Text color='#fff' fontSize='30px' bold style={{opacity:\"1\",lineHeight:1,verticalAlign:\"middle\"}}>\n        {prefix+currentValue}\n        </Text>\n        <Text  color='#8aa3fd' fontSize='17px' bold style={{opacity:\"1\",lineHeight:1,verticalAlign:\"middle\",marginLeft:\"16px\"}}>\n        Now\n        </Text>\n        </Flex>\n      <ChartAreaContainer>\n        <Chart currentValue={currentValue} dataKey={dataKey} prefix={prefix}  data={data} />\n      </ChartAreaContainer>\n      <DescArea>\n      <Text>{desc}</Text>\n      </DescArea>\n\n    </Modal>\n  )\n}\n\nexport default ChartModal\n","C:\\Users\\90532\\Desktop\\metavill-front\\src\\views\\Dashboard\\Chart.tsx",["1080","1081","1082","1083","1084"],"import React ,{useEffect,useState} from \"react\";\nimport { Text } from \"@macist-m/robinia-uikit\";\nimport { AreaChart,Area,ResponsiveContainer,XAxis, YAxis,Tooltip} from 'recharts';\nimport styled from 'styled-components'\n\n\nexport interface ChartProps {\n    data?: any\n    prefix?:string\n    dataKey:string\n    currentValue?:string\n  }\n\n  const TooltipContainer = styled.div`\n  width:fit-content;\n  padding:8px 16px;\n  max-width:220px;\n  border-radius:16px;\n  color:white;\n  background-color:rgba(0,0,0,0.1);\n  backdrop-filter:blur(3px);\n  border:1px solid rgb(27,34,58,0.4);\n\n`\n  const Chart: React.FC<ChartProps> = ({data,prefix,dataKey,currentValue}) => {\n\n\n     const getIntroOfPage = (label) => {\n        // if (label === 'Page A') {\n        //   return \"December 22\";\n        // }\n        // if (label === 'Page B') {\n        //   return \"Page B is about women's dress\";\n        // }\n        // if (label === 'Page C') {\n        //   return \"Page C is about women's bag\";\n        // }\n        // if (label === 'Page D') {\n        //   return 'Page D is about household goods';\n        // }\n        // if (label === 'Page E') {\n        //   return 'Page E is about food';\n        // }\n        // if (label === 'Page F') {\n        //   return 'Page F is about baby food';\n        // }\n        return \"December 22 - 2022\";\n      };\n      const abbrNum = (number)=>{\n            // 2 decimal places => 100, 3 => 1000, etc\n                    // Enumerate number abbreviations\n            const abbrev = [ \"k\", \"m\", \"b\", \"t\" ];\n            const decPlaces = 10 ** 2\n            // Math.pow(10,decPlaces);\n\n\n            let temp;\n            // Go through the array backwards, so we do the largest first\n            for (let i=abbrev.length-1; i>=0; i--) {\n\n                // Convert array index to \"1000\", \"1000000\", etc\n                const size = 10 ** ((i+1)*3)\n                // Math.pow(10,(i+1)*3);\n\n                // If the number is bigger or equal do the abbreviation\n                if(size <= number) {\n                    // Here, we multiply by decPlaces, round, and then divide by decPlaces.\n                  \n                    // This gives us nice rounding to a particular decimal place.\n                    \n                    temp = Math.round(number*decPlaces/size)/decPlaces;\n\n                    // Handle special case where we round up to the next abbreviation\n                    if((number === 1000) && (i < abbrev.length - 1)) {\n                      temp = 1;\n                        i++;\n                    }\n\n                    // Add the letter for the abbreviation\n                    temp += abbrev[i];\n\n                    // We are done... stop\n                    break;\n                }\n            }\n            if(prefix){\n              return prefix + temp\n            }\n            return temp;\n      }\n        const CustomTooltip = ({ active, payload, label }: any) => {\n            if (active && payload && payload.length) {\n              return (\n                <TooltipContainer>\n\n                  <Text style={{opacity:0.8}}>{label}</Text>\n                  <Text fontSize=\"12px\" style={{opacity:0.8}}>Data as of UTC +00:00</Text>\n                  {(dataKey === \"tresuary\") &&\n                    payload.map(item=>\n                      item.value > 0 ?\n                      <Text fontSize=\"14px\" color=\"#fff\" bold>{`${item.name}: ${prefix}${item.value.toLocaleString(\"ko-KR\", {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                        })}`}</Text> : null\n                    )\n\n                  }\n                    {(dataKey === \"protokol\") &&\n                payload.map(item=>\n                  item.value > 0 ?\n                  <Text fontSize=\"14px\" color=\"#fff\" bold>{`${item.name}: ${prefix}${item.value.toLocaleString(\"ko-KR\", {\n                    minimumFractionDigits: 0,\n                    maximumFractionDigits: 0,\n                    })}`}</Text> : null\n                )\n                  }\n                  {(dataKey !== \"tresuary\" && dataKey !== \"protokol\") &&\n                  <Text fontSize=\"18px\" color=\"#fff\" bold>{`${prefix}${payload[0].value.toLocaleString(\"ko-KR\", {\n                    minimumFractionDigits: 0,\n                    maximumFractionDigits: 0,\n                    })}`}</Text>\n                  }\n\n                </TooltipContainer>\n              );\n            }\n\n            return null;\n          };\n\n\n\n\n  return (\n    <ResponsiveContainer  width=\"100%\" height=\"100%\">\n     <AreaChart width={404} data={data}>\n      <defs>\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#f7f4ce\" stopOpacity={0.1}/>\n            <stop offset=\"100%\" stopColor=\"#d1aaff\" stopOpacity={1}/>\n          </linearGradient>\n        </defs>\n        <XAxis interval={220} dataKey=\"timestamp\"  padding={{right:12}}  tickLine={false}    axisLine={false} tick={\n            {fill:\"#fff\",opacity:\"0.8\"}\n        } />\n        <YAxis interval=\"preserveEnd\" tickFormatter={abbrNum}  tickLine={false} axisLine={false} tick={\n            {fill:\"#fff\",opacity:\"0.8\"}\n        } />\n\n        <Tooltip content={<CustomTooltip/>} />\n        {(dataKey === \"tresuary\") &&\n              <>\n               <Area type=\"monotone\" dataKey=\"BTCB\" stroke=\"#8884d8\" fill=\"#8884d8\" strokeWidth={3} />\n               <Area type=\"monotone\" dataKey=\"BNB\" stroke=\"#82ca9d\" fill=\"#82ca9d\" strokeWidth={3} />\n               <Area type=\"monotone\" dataKey=\"BUSD\" stroke=\"#ffc658\" fill=\"#ffc658\" strokeWidth={3} />\n               <Area type=\"monotone\" dataKey=\"USDT\" stroke=\"#f7f4ce\" fill=\"url(#colorUv)\" strokeWidth={3} />\n               <Area type=\"monotone\" dataKey=\"ETH\" stroke=\"#f7f4ce\" fill=\"url(#colorUv)\" strokeWidth={3} />\n               <Area type=\"monotone\" dataKey=\"CAKE\" stroke=\"#f7f4ce\" fill=\"url(#colorUv)\" strokeWidth={3} />\n              </>\n\n\n\n      }\n      {(dataKey === \"protokol\") &&\n        <>\n        <Area type=\"monotone\" dataKey=\"WSTBNB\"  stroke=\"#f7f4ce\" fill=\"url(#colorUv)\" strokeWidth={3} />\n        <Area type=\"monotone\" dataKey=\"WSTBUSD\"  stroke=\"#f7f4ce\" fill=\"#091728\" strokeWidth={3} />\n       </>\n       }\n        {(dataKey !== \"protokol\" && dataKey !== \"tresuary\" ) &&\n        <Area type=\"monotone\" dataKey={dataKey} stroke=\"#f7f4ce\" fill=\"url(#colorUv)\" strokeWidth={3} />\n       }\n\n\n\n    </AreaChart>\n  </ResponsiveContainer>\n  );\n}\n\nexport default Chart;\n",{"ruleId":"1085","replacedBy":"1086"},{"ruleId":"1087","replacedBy":"1088"},{"ruleId":"1089","replacedBy":"1090"},{"ruleId":"1091","replacedBy":"1092"},{"ruleId":"1093","replacedBy":"1094"},{"ruleId":"1095","severity":1,"message":"1096","line":2,"column":35,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1099","line":8,"column":8,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1100","line":21,"column":7,"nodeType":"1097","messageId":"1098","endLine":21,"endColumn":19},{"ruleId":"1101","severity":1,"message":"1102","line":43,"column":3,"nodeType":"1103","messageId":"1104","endLine":43,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1106","line":2,"column":8,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1107","line":7,"column":8,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1108","line":8,"column":10,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":37},{"ruleId":"1095","severity":1,"message":"1109","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1110","line":49,"column":11,"nodeType":"1097","messageId":"1098","endLine":49,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1111","line":51,"column":9,"nodeType":"1097","messageId":"1098","endLine":51,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1112","line":2,"column":30,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":36},{"ruleId":"1095","severity":1,"message":"1113","line":2,"column":38,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":46},{"ruleId":"1095","severity":1,"message":"1114","line":5,"column":10,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1115","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1116","line":6,"column":26,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":46},{"ruleId":"1095","severity":1,"message":"1117","line":7,"column":8,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":12},{"ruleId":"1095","severity":1,"message":"1118","line":60,"column":29,"nodeType":"1097","messageId":"1098","endLine":60,"endColumn":32},{"ruleId":"1101","severity":1,"message":"1102","line":61,"column":33,"nodeType":"1103","messageId":"1104","endLine":61,"endColumn":44},{"ruleId":"1095","severity":1,"message":"1119","line":33,"column":7,"nodeType":"1097","messageId":"1098","endLine":33,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1120","line":2,"column":10,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1121","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1122","line":11,"column":8,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":31},{"ruleId":"1095","severity":1,"message":"1123","line":12,"column":8,"nodeType":"1097","messageId":"1098","endLine":12,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1124","line":14,"column":19,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":29},{"ruleId":"1095","severity":1,"message":"1125","line":21,"column":3,"nodeType":"1097","messageId":"1098","endLine":21,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1126","line":22,"column":3,"nodeType":"1097","messageId":"1098","endLine":22,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1127","line":24,"column":34,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":40},{"ruleId":"1095","severity":1,"message":"1128","line":26,"column":8,"nodeType":"1097","messageId":"1098","endLine":26,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1129","line":28,"column":8,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1130","line":46,"column":43,"nodeType":"1097","messageId":"1098","endLine":46,"endColumn":53},{"ruleId":"1095","severity":1,"message":"1131","line":55,"column":20,"nodeType":"1097","messageId":"1098","endLine":55,"endColumn":28},{"ruleId":"1095","severity":1,"message":"1132","line":57,"column":10,"nodeType":"1097","messageId":"1098","endLine":57,"endColumn":31},{"ruleId":"1095","severity":1,"message":"1133","line":57,"column":33,"nodeType":"1097","messageId":"1098","endLine":57,"endColumn":57},{"ruleId":"1095","severity":1,"message":"1134","line":58,"column":10,"nodeType":"1097","messageId":"1098","endLine":58,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1135","line":58,"column":16,"nodeType":"1097","messageId":"1098","endLine":58,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1136","line":61,"column":10,"nodeType":"1097","messageId":"1098","endLine":61,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1137","line":62,"column":10,"nodeType":"1097","messageId":"1098","endLine":62,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1138","line":66,"column":10,"nodeType":"1097","messageId":"1098","endLine":66,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1139","line":66,"column":19,"nodeType":"1097","messageId":"1098","endLine":66,"endColumn":29},{"ruleId":"1095","severity":1,"message":"1140","line":68,"column":10,"nodeType":"1097","messageId":"1098","endLine":68,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1141","line":68,"column":21,"nodeType":"1097","messageId":"1098","endLine":68,"endColumn":27},{"ruleId":"1095","severity":1,"message":"1142","line":69,"column":10,"nodeType":"1097","messageId":"1098","endLine":69,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1143","line":69,"column":21,"nodeType":"1097","messageId":"1098","endLine":69,"endColumn":32},{"ruleId":"1095","severity":1,"message":"1144","line":73,"column":18,"nodeType":"1097","messageId":"1098","endLine":73,"endColumn":28},{"ruleId":"1095","severity":1,"message":"1145","line":75,"column":10,"nodeType":"1097","messageId":"1098","endLine":75,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1146","line":75,"column":24,"nodeType":"1097","messageId":"1098","endLine":75,"endColumn":39},{"ruleId":"1101","severity":1,"message":"1102","line":86,"column":9,"nodeType":"1103","messageId":"1104","endLine":86,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":95,"column":9,"nodeType":"1103","messageId":"1104","endLine":95,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1147","line":161,"column":9,"nodeType":"1097","messageId":"1098","endLine":161,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":167,"column":5,"nodeType":"1103","messageId":"1104","endLine":167,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1148","line":180,"column":9,"nodeType":"1097","messageId":"1098","endLine":180,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1149","line":185,"column":9,"nodeType":"1097","messageId":"1098","endLine":185,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":202,"column":5,"nodeType":"1103","messageId":"1104","endLine":202,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":203,"column":5,"nodeType":"1103","messageId":"1104","endLine":203,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":204,"column":5,"nodeType":"1103","messageId":"1104","endLine":204,"endColumn":16},{"ruleId":"1085","replacedBy":"1150"},{"ruleId":"1087","replacedBy":"1151"},{"ruleId":"1089","replacedBy":"1152"},{"ruleId":"1091","replacedBy":"1153"},{"ruleId":"1093","replacedBy":"1154"},{"ruleId":"1095","severity":1,"message":"1155","line":27,"column":34,"nodeType":"1097","messageId":"1098","endLine":27,"endColumn":39},{"ruleId":"1095","severity":1,"message":"1156","line":3,"column":8,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1157","line":5,"column":8,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1158","line":6,"column":8,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1159","line":8,"column":8,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1160","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1161","line":14,"column":8,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1162","line":15,"column":8,"nodeType":"1097","messageId":"1098","endLine":15,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1163","line":16,"column":8,"nodeType":"1097","messageId":"1098","endLine":16,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1164","line":20,"column":8,"nodeType":"1097","messageId":"1098","endLine":20,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":41,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":49},{"ruleId":"1095","severity":1,"message":"1121","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1165","line":8,"column":27,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":41},{"ruleId":"1095","severity":1,"message":"1166","line":8,"column":43,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":56},{"ruleId":"1095","severity":1,"message":"1124","line":16,"column":10,"nodeType":"1097","messageId":"1098","endLine":16,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1167","line":19,"column":8,"nodeType":"1097","messageId":"1098","endLine":19,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1168","line":21,"column":8,"nodeType":"1097","messageId":"1098","endLine":21,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1169","line":30,"column":9,"nodeType":"1097","messageId":"1098","endLine":30,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1170","line":33,"column":9,"nodeType":"1097","messageId":"1098","endLine":33,"endColumn":17},{"ruleId":"1101","severity":1,"message":"1102","line":62,"column":9,"nodeType":"1103","messageId":"1104","endLine":62,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1171","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1172","line":17,"column":8,"nodeType":"1097","messageId":"1098","endLine":17,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1169","line":24,"column":9,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":24},{"ruleId":"1101","severity":1,"message":"1102","line":43,"column":3,"nodeType":"1103","messageId":"1104","endLine":43,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":44,"column":3,"nodeType":"1103","messageId":"1104","endLine":44,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1173","line":51,"column":11,"nodeType":"1097","messageId":"1098","endLine":51,"endColumn":33},{"ruleId":"1095","severity":1,"message":"1174","line":58,"column":11,"nodeType":"1097","messageId":"1098","endLine":58,"endColumn":34},{"ruleId":"1095","severity":1,"message":"1175","line":62,"column":68,"nodeType":"1097","messageId":"1098","endLine":62,"endColumn":91},{"ruleId":"1095","severity":1,"message":"1176","line":108,"column":7,"nodeType":"1097","messageId":"1098","endLine":108,"endColumn":11},{"ruleId":"1095","severity":1,"message":"1121","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1165","line":8,"column":27,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":41},{"ruleId":"1095","severity":1,"message":"1166","line":8,"column":43,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":56},{"ruleId":"1095","severity":1,"message":"1169","line":26,"column":9,"nodeType":"1097","messageId":"1098","endLine":26,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1177","line":3,"column":10,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1171","line":3,"column":16,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1178","line":3,"column":37,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1179","line":3,"column":45,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":57},{"ruleId":"1095","severity":1,"message":"1180","line":3,"column":59,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":63},{"ruleId":"1095","severity":1,"message":"1121","line":3,"column":65,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":70},{"ruleId":"1095","severity":1,"message":"1181","line":7,"column":8,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":13},{"ruleId":"1095","severity":1,"message":"1182","line":11,"column":7,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1183","line":24,"column":7,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":11},{"ruleId":"1095","severity":1,"message":"1169","line":40,"column":9,"nodeType":"1097","messageId":"1098","endLine":40,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1184","line":20,"column":10,"nodeType":"1097","messageId":"1098","endLine":20,"endColumn":13},{"ruleId":"1095","severity":1,"message":"1185","line":93,"column":31,"nodeType":"1097","messageId":"1098","endLine":93,"endColumn":47},{"ruleId":"1095","severity":1,"message":"1184","line":2,"column":10,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":13},{"ruleId":"1095","severity":1,"message":"1186","line":7,"column":8,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":13},{"ruleId":"1095","severity":1,"message":"1187","line":9,"column":10,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1188","line":11,"column":10,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1189","line":21,"column":8,"nodeType":"1097","messageId":"1098","endLine":21,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1190","line":24,"column":8,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1191","line":50,"column":5,"nodeType":"1097","messageId":"1098","endLine":50,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1192","line":82,"column":9,"nodeType":"1097","messageId":"1098","endLine":82,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1193","line":240,"column":7,"nodeType":"1097","messageId":"1098","endLine":240,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1194","line":4,"column":32,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":47},{"ruleId":"1095","severity":1,"message":"1195","line":5,"column":10,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1196","line":80,"column":7,"nodeType":"1097","messageId":"1098","endLine":80,"endColumn":16},{"ruleId":"1085","replacedBy":"1197"},{"ruleId":"1087","replacedBy":"1198"},{"ruleId":"1089","replacedBy":"1199"},{"ruleId":"1091","replacedBy":"1200"},{"ruleId":"1093","replacedBy":"1201"},{"ruleId":"1095","severity":1,"message":"1202","line":2,"column":8,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1203","line":4,"column":10,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1180","line":5,"column":10,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1106","line":6,"column":8,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1204","line":8,"column":3,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1205","line":9,"column":3,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1206","line":10,"column":3,"nodeType":"1097","messageId":"1098","endLine":10,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1207","line":12,"column":10,"nodeType":"1097","messageId":"1098","endLine":12,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1208","line":13,"column":10,"nodeType":"1097","messageId":"1098","endLine":13,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1124","line":14,"column":10,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1209","line":17,"column":3,"nodeType":"1097","messageId":"1098","endLine":17,"endColumn":11},{"ruleId":"1095","severity":1,"message":"1210","line":18,"column":3,"nodeType":"1097","messageId":"1098","endLine":18,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1211","line":19,"column":3,"nodeType":"1097","messageId":"1098","endLine":19,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1212","line":20,"column":3,"nodeType":"1097","messageId":"1098","endLine":20,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1213","line":29,"column":7,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":20},{"ruleId":"1214","severity":1,"message":"1215","line":29,"column":23,"nodeType":"1216","messageId":"1217","endLine":29,"endColumn":32},{"ruleId":"1101","severity":1,"message":"1102","line":45,"column":9,"nodeType":"1103","messageId":"1104","endLine":45,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1195","line":5,"column":10,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1124","line":10,"column":10,"nodeType":"1097","messageId":"1098","endLine":10,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1218","line":11,"column":8,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":18},{"ruleId":"1101","severity":1,"message":"1102","line":131,"column":1,"nodeType":"1103","messageId":"1104","endLine":131,"endColumn":12},{"ruleId":"1095","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1219","line":1,"column":28,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":39},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":41,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":49},{"ruleId":"1095","severity":1,"message":"1130","line":11,"column":43,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":53},{"ruleId":"1095","severity":1,"message":"1220","line":1,"column":8,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1221","line":36,"column":9,"nodeType":"1097","messageId":"1098","endLine":36,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1222","line":90,"column":9,"nodeType":"1097","messageId":"1098","endLine":90,"endColumn":17},{"ruleId":"1085","replacedBy":"1223"},{"ruleId":"1087","replacedBy":"1224"},{"ruleId":"1089","replacedBy":"1225"},{"ruleId":"1091","replacedBy":"1226"},{"ruleId":"1093","replacedBy":"1227"},{"ruleId":"1095","severity":1,"message":"1219","line":1,"column":27,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":38},{"ruleId":"1095","severity":1,"message":"1171","line":3,"column":10,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1228","line":3,"column":25,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":33},{"ruleId":"1095","severity":1,"message":"1178","line":3,"column":35,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":41},{"ruleId":"1095","severity":1,"message":"1229","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1128","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1230","line":10,"column":8,"nodeType":"1097","messageId":"1098","endLine":10,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1231","line":11,"column":8,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1232","line":18,"column":7,"nodeType":"1097","messageId":"1098","endLine":18,"endColumn":28},{"ruleId":"1095","severity":1,"message":"1233","line":25,"column":7,"nodeType":"1097","messageId":"1098","endLine":25,"endColumn":12},{"ruleId":"1095","severity":1,"message":"1234","line":29,"column":7,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1235","line":33,"column":7,"nodeType":"1097","messageId":"1098","endLine":33,"endColumn":12},{"ruleId":"1095","severity":1,"message":"1236","line":38,"column":7,"nodeType":"1097","messageId":"1098","endLine":38,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1237","line":43,"column":10,"nodeType":"1097","messageId":"1098","endLine":43,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1238","line":43,"column":21,"nodeType":"1097","messageId":"1098","endLine":43,"endColumn":33},{"ruleId":"1095","severity":1,"message":"1110","line":44,"column":11,"nodeType":"1097","messageId":"1098","endLine":44,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1169","line":45,"column":9,"nodeType":"1097","messageId":"1098","endLine":45,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1239","line":47,"column":9,"nodeType":"1097","messageId":"1098","endLine":47,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1240","line":48,"column":9,"nodeType":"1097","messageId":"1098","endLine":48,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1241","line":50,"column":9,"nodeType":"1097","messageId":"1098","endLine":50,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1242","line":53,"column":9,"nodeType":"1097","messageId":"1098","endLine":53,"endColumn":26},{"ruleId":"1085","replacedBy":"1243"},{"ruleId":"1087","replacedBy":"1244"},{"ruleId":"1089","replacedBy":"1245"},{"ruleId":"1091","replacedBy":"1246"},{"ruleId":"1093","replacedBy":"1247"},{"ruleId":"1095","severity":1,"message":"1248","line":4,"column":10,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":31},{"ruleId":"1101","severity":1,"message":"1102","line":56,"column":5,"nodeType":"1103","messageId":"1104","endLine":56,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":57,"column":5,"nodeType":"1103","messageId":"1104","endLine":57,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":58,"column":5,"nodeType":"1103","messageId":"1104","endLine":58,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":77,"column":5,"nodeType":"1103","messageId":"1104","endLine":77,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1249","line":69,"column":7,"nodeType":"1097","messageId":"1098","endLine":69,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1250","line":76,"column":3,"nodeType":"1097","messageId":"1098","endLine":76,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1251","line":8,"column":26,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1252","line":4,"column":10,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1253","line":4,"column":24,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":31},{"ruleId":"1095","severity":1,"message":"1254","line":4,"column":43,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":50},{"ruleId":"1095","severity":1,"message":"1255","line":28,"column":3,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":7},{"ruleId":"1095","severity":1,"message":"1256","line":8,"column":33,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":45},{"ruleId":"1101","severity":1,"message":"1102","line":24,"column":5,"nodeType":"1103","messageId":"1104","endLine":24,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1120","line":2,"column":10,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1257","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1258","line":9,"column":10,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1251","line":9,"column":26,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1259","line":9,"column":45,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":56},{"ruleId":"1095","severity":1,"message":"1218","line":12,"column":8,"nodeType":"1097","messageId":"1098","endLine":12,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1260","line":14,"column":10,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1261","line":15,"column":8,"nodeType":"1097","messageId":"1098","endLine":15,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1262","line":17,"column":71,"nodeType":"1097","messageId":"1098","endLine":17,"endColumn":94},{"ruleId":"1095","severity":1,"message":"1263","line":36,"column":62,"nodeType":"1097","messageId":"1098","endLine":36,"endColumn":70},{"ruleId":"1095","severity":1,"message":"1264","line":39,"column":10,"nodeType":"1097","messageId":"1098","endLine":39,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1265","line":39,"column":15,"nodeType":"1097","messageId":"1098","endLine":39,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1266","line":44,"column":9,"nodeType":"1097","messageId":"1098","endLine":44,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":67,"column":9,"nodeType":"1103","messageId":"1104","endLine":67,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":98,"column":7,"nodeType":"1103","messageId":"1104","endLine":98,"endColumn":18},{"ruleId":"1267","severity":1,"message":"1268","line":111,"column":13,"nodeType":"1269","messageId":"1270","endLine":111,"endColumn":37,"fix":"1271"},{"ruleId":"1267","severity":1,"message":"1268","line":112,"column":13,"nodeType":"1269","messageId":"1270","endLine":112,"endColumn":31,"fix":"1272"},{"ruleId":"1095","severity":1,"message":"1273","line":112,"column":13,"nodeType":"1097","messageId":"1098","endLine":112,"endColumn":17},{"ruleId":"1267","severity":1,"message":"1268","line":113,"column":13,"nodeType":"1269","messageId":"1270","endLine":113,"endColumn":37,"fix":"1274"},{"ruleId":"1101","severity":1,"message":"1102","line":117,"column":9,"nodeType":"1103","messageId":"1104","endLine":117,"endColumn":20},{"ruleId":"1267","severity":1,"message":"1268","line":118,"column":15,"nodeType":"1269","messageId":"1270","endLine":118,"endColumn":46,"fix":"1275"},{"ruleId":"1101","severity":1,"message":"1102","line":120,"column":9,"nodeType":"1103","messageId":"1104","endLine":120,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":122,"column":9,"nodeType":"1103","messageId":"1104","endLine":122,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":123,"column":9,"nodeType":"1103","messageId":"1104","endLine":123,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":130,"column":7,"nodeType":"1103","messageId":"1104","endLine":130,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1276","line":146,"column":9,"nodeType":"1097","messageId":"1098","endLine":146,"endColumn":36},{"ruleId":"1101","severity":1,"message":"1102","line":83,"column":9,"nodeType":"1103","messageId":"1104","endLine":83,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1277","line":80,"column":58,"nodeType":"1097","messageId":"1098","endLine":80,"endColumn":65},{"ruleId":"1101","severity":1,"message":"1102","line":81,"column":3,"nodeType":"1103","messageId":"1104","endLine":81,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1278","line":3,"column":8,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1279","line":4,"column":8,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1126","line":8,"column":10,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1280","line":44,"column":9,"nodeType":"1097","messageId":"1098","endLine":44,"endColumn":16},{"ruleId":"1101","severity":1,"message":"1102","line":114,"column":3,"nodeType":"1103","messageId":"1104","endLine":114,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":115,"column":3,"nodeType":"1103","messageId":"1104","endLine":115,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":117,"column":3,"nodeType":"1103","messageId":"1104","endLine":117,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":118,"column":3,"nodeType":"1103","messageId":"1104","endLine":118,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":119,"column":3,"nodeType":"1103","messageId":"1104","endLine":119,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":120,"column":3,"nodeType":"1103","messageId":"1104","endLine":120,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1281","line":3,"column":10,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1282","line":11,"column":33,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":39},{"ruleId":"1214","severity":1,"message":"1215","line":12,"column":74,"nodeType":"1216","messageId":"1217","endLine":12,"endColumn":82},{"ruleId":"1095","severity":1,"message":"1282","line":19,"column":33,"nodeType":"1097","messageId":"1098","endLine":19,"endColumn":39},{"ruleId":"1214","severity":1,"message":"1215","line":20,"column":58,"nodeType":"1216","messageId":"1217","endLine":20,"endColumn":66},{"ruleId":"1101","severity":1,"message":"1102","line":21,"column":13,"nodeType":"1103","messageId":"1104","endLine":21,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1283","line":46,"column":36,"nodeType":"1097","messageId":"1098","endLine":46,"endColumn":40},{"ruleId":"1095","severity":1,"message":"1106","line":2,"column":8,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1203","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1257","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1284","line":7,"column":23,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":30},{"ruleId":"1095","severity":1,"message":"1285","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1286","line":10,"column":31,"nodeType":"1097","messageId":"1098","endLine":10,"endColumn":38},{"ruleId":"1095","severity":1,"message":"1118","line":26,"column":67,"nodeType":"1097","messageId":"1098","endLine":26,"endColumn":70},{"ruleId":"1095","severity":1,"message":"1277","line":26,"column":72,"nodeType":"1097","messageId":"1098","endLine":26,"endColumn":79},{"ruleId":"1095","severity":1,"message":"1237","line":28,"column":10,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1287","line":29,"column":9,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1288","line":52,"column":9,"nodeType":"1097","messageId":"1098","endLine":52,"endColumn":29},{"ruleId":"1101","severity":1,"message":"1102","line":12,"column":3,"nodeType":"1103","messageId":"1104","endLine":12,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":21,"column":2,"nodeType":"1103","messageId":"1104","endLine":21,"endColumn":13},{"ruleId":"1101","severity":1,"message":"1102","line":22,"column":2,"nodeType":"1103","messageId":"1104","endLine":22,"endColumn":13},{"ruleId":"1085","replacedBy":"1289"},{"ruleId":"1087","replacedBy":"1290"},{"ruleId":"1089","replacedBy":"1291"},{"ruleId":"1091","replacedBy":"1292"},{"ruleId":"1093","replacedBy":"1293"},{"ruleId":"1095","severity":1,"message":"1294","line":23,"column":7,"nodeType":"1097","messageId":"1098","endLine":23,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1295","line":39,"column":3,"nodeType":"1097","messageId":"1098","endLine":39,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1296","line":43,"column":3,"nodeType":"1097","messageId":"1098","endLine":43,"endColumn":10},{"ruleId":"1095","severity":1,"message":"1297","line":49,"column":9,"nodeType":"1097","messageId":"1098","endLine":49,"endColumn":30},{"ruleId":"1095","severity":1,"message":"1252","line":4,"column":10,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1253","line":4,"column":24,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":31},{"ruleId":"1095","severity":1,"message":"1298","line":4,"column":33,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":41},{"ruleId":"1095","severity":1,"message":"1254","line":4,"column":43,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":50},{"ruleId":"1095","severity":1,"message":"1255","line":28,"column":3,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":7},{"ruleId":"1095","severity":1,"message":"1299","line":31,"column":3,"nodeType":"1097","messageId":"1098","endLine":31,"endColumn":13},{"ruleId":"1101","severity":1,"message":"1102","line":33,"column":3,"nodeType":"1103","messageId":"1104","endLine":33,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":26,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":34},{"ruleId":"1095","severity":1,"message":"1300","line":8,"column":8,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1202","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1301","line":24,"column":55,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":62},{"ruleId":"1095","severity":1,"message":"1263","line":24,"column":85,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":93},{"ruleId":"1095","severity":1,"message":"1277","line":24,"column":95,"nodeType":"1097","messageId":"1098","endLine":24,"endColumn":102},{"ruleId":"1095","severity":1,"message":"1302","line":49,"column":9,"nodeType":"1097","messageId":"1098","endLine":49,"endColumn":27},{"ruleId":"1095","severity":1,"message":"1220","line":2,"column":8,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1221","line":5,"column":9,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":23},{"ruleId":"1085","replacedBy":"1303"},{"ruleId":"1087","replacedBy":"1304"},{"ruleId":"1089","replacedBy":"1305"},{"ruleId":"1091","replacedBy":"1306"},{"ruleId":"1093","replacedBy":"1307"},{"ruleId":"1095","severity":1,"message":"1171","line":3,"column":10,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1228","line":3,"column":25,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":33},{"ruleId":"1095","severity":1,"message":"1232","line":18,"column":7,"nodeType":"1097","messageId":"1098","endLine":18,"endColumn":28},{"ruleId":"1095","severity":1,"message":"1233","line":25,"column":7,"nodeType":"1097","messageId":"1098","endLine":25,"endColumn":12},{"ruleId":"1095","severity":1,"message":"1234","line":29,"column":7,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1236","line":38,"column":7,"nodeType":"1097","messageId":"1098","endLine":38,"endColumn":14},{"ruleId":"1101","severity":1,"message":"1102","line":45,"column":3,"nodeType":"1103","messageId":"1104","endLine":45,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1308","line":4,"column":8,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1208","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1203","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1106","line":4,"column":8,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1309","line":6,"column":8,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1310","line":1,"column":17,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":26,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":34},{"ruleId":"1095","severity":1,"message":"1124","line":4,"column":10,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1220","line":5,"column":8,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1311","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1312","line":18,"column":11,"nodeType":"1097","messageId":"1098","endLine":18,"endColumn":24},{"ruleId":"1095","severity":1,"message":"1313","line":28,"column":9,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1314","line":29,"column":9,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1315","line":30,"column":9,"nodeType":"1097","messageId":"1098","endLine":30,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1170","line":31,"column":9,"nodeType":"1097","messageId":"1098","endLine":31,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1316","line":32,"column":9,"nodeType":"1097","messageId":"1098","endLine":32,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1221","line":33,"column":9,"nodeType":"1097","messageId":"1098","endLine":33,"endColumn":23},{"ruleId":"1095","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1219","line":1,"column":28,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":39},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":41,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":49},{"ruleId":"1095","severity":1,"message":"1317","line":2,"column":10,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1106","line":4,"column":8,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":17},{"ruleId":"1095","severity":1,"message":"1318","line":5,"column":10,"nodeType":"1097","messageId":"1098","endLine":5,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1311","line":6,"column":10,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1207","line":7,"column":10,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1209","line":8,"column":10,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1212","line":8,"column":20,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":35},{"ruleId":"1095","severity":1,"message":"1210","line":8,"column":37,"nodeType":"1097","messageId":"1098","endLine":8,"endColumn":53},{"ruleId":"1095","severity":1,"message":"1319","line":9,"column":8,"nodeType":"1097","messageId":"1098","endLine":9,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1320","line":10,"column":10,"nodeType":"1097","messageId":"1098","endLine":10,"endColumn":32},{"ruleId":"1095","severity":1,"message":"1124","line":11,"column":10,"nodeType":"1097","messageId":"1098","endLine":11,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1220","line":12,"column":8,"nodeType":"1097","messageId":"1098","endLine":12,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1300","line":13,"column":8,"nodeType":"1097","messageId":"1098","endLine":13,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1321","line":14,"column":10,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":29},{"ruleId":"1095","severity":1,"message":"1322","line":15,"column":8,"nodeType":"1097","messageId":"1098","endLine":15,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1323","line":16,"column":8,"nodeType":"1097","messageId":"1098","endLine":16,"endColumn":19},{"ruleId":"1095","severity":1,"message":"1130","line":47,"column":37,"nodeType":"1097","messageId":"1098","endLine":47,"endColumn":47},{"ruleId":"1095","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1219","line":1,"column":28,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":39},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":41,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":49},{"ruleId":"1095","severity":1,"message":"1130","line":47,"column":37,"nodeType":"1097","messageId":"1098","endLine":47,"endColumn":47},{"ruleId":"1095","severity":1,"message":"1211","line":18,"column":3,"nodeType":"1097","messageId":"1098","endLine":18,"endColumn":16},{"ruleId":"1214","severity":1,"message":"1215","line":27,"column":23,"nodeType":"1216","messageId":"1217","endLine":27,"endColumn":32},{"ruleId":"1101","severity":1,"message":"1102","line":43,"column":9,"nodeType":"1103","messageId":"1104","endLine":43,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1314","line":51,"column":9,"nodeType":"1097","messageId":"1098","endLine":51,"endColumn":21},{"ruleId":"1095","severity":1,"message":"1324","line":100,"column":9,"nodeType":"1097","messageId":"1098","endLine":100,"endColumn":15},{"ruleId":"1214","severity":1,"message":"1215","line":100,"column":27,"nodeType":"1216","messageId":"1217","endLine":100,"endColumn":36},{"ruleId":"1095","severity":1,"message":"1325","line":4,"column":44,"nodeType":"1097","messageId":"1098","endLine":4,"endColumn":50},{"ruleId":"1095","severity":1,"message":"1326","line":7,"column":24,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":35},{"ruleId":"1095","severity":1,"message":"1327","line":7,"column":37,"nodeType":"1097","messageId":"1098","endLine":7,"endColumn":51},{"ruleId":"1095","severity":1,"message":"1328","line":36,"column":7,"nodeType":"1097","messageId":"1098","endLine":36,"endColumn":20},{"ruleId":"1101","severity":1,"message":"1102","line":67,"column":5,"nodeType":"1103","messageId":"1104","endLine":67,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1329","line":2,"column":10,"nodeType":"1097","messageId":"1098","endLine":2,"endColumn":16},{"ruleId":"1095","severity":1,"message":"1330","line":68,"column":10,"nodeType":"1097","messageId":"1098","endLine":68,"endColumn":21},{"ruleId":"1085","replacedBy":"1086"},{"ruleId":"1087","replacedBy":"1088"},{"ruleId":"1089","replacedBy":"1090"},{"ruleId":"1091","replacedBy":"1092"},{"ruleId":"1093","replacedBy":"1094"},{"ruleId":"1095","severity":1,"message":"1331","line":6,"column":8,"nodeType":"1097","messageId":"1098","endLine":6,"endColumn":13},{"ruleId":"1095","severity":1,"message":"1332","line":29,"column":7,"nodeType":"1097","messageId":"1098","endLine":29,"endColumn":20},{"ruleId":"1095","severity":1,"message":"1333","line":40,"column":7,"nodeType":"1097","messageId":"1098","endLine":40,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1334","line":123,"column":84,"nodeType":"1097","messageId":"1098","endLine":123,"endColumn":93},{"ruleId":"1095","severity":1,"message":"1335","line":174,"column":8,"nodeType":"1097","messageId":"1098","endLine":174,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1336","line":14,"column":3,"nodeType":"1097","messageId":"1098","endLine":14,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1336","line":28,"column":3,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":18},{"ruleId":"1095","severity":1,"message":"1337","line":39,"column":7,"nodeType":"1097","messageId":"1098","endLine":39,"endColumn":42},{"ruleId":"1101","severity":1,"message":"1102","line":70,"column":4,"nodeType":"1103","messageId":"1104","endLine":70,"endColumn":15},{"ruleId":"1095","severity":1,"message":"1338","line":104,"column":3,"nodeType":"1097","messageId":"1098","endLine":104,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1179","line":3,"column":23,"nodeType":"1097","messageId":"1098","endLine":3,"endColumn":35},{"ruleId":"1095","severity":1,"message":"1105","line":1,"column":16,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":25},{"ruleId":"1095","severity":1,"message":"1113","line":1,"column":26,"nodeType":"1097","messageId":"1098","endLine":1,"endColumn":34},{"ruleId":"1095","severity":1,"message":"1339","line":25,"column":61,"nodeType":"1097","messageId":"1098","endLine":25,"endColumn":73},{"ruleId":"1095","severity":1,"message":"1340","line":28,"column":12,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1341","line":28,"column":30,"nodeType":"1097","messageId":"1098","endLine":28,"endColumn":35},"lines-around-directive",["1342"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'LeafContainers' is defined but never used.","'ApplyForIfos' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'useEffect' is defined but never used.","'BigNumber' is defined but never used.","'rabbitmintingfarm' is defined but never used.","'RABBIT_MINTING_FARM_ADDRESS' is defined but never used.","'multicall' is defined but never used.","'account' is assigned a value but never used.","'showModal' is assigned a value but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'useLockedSale' is defined but never used.","'getBusdAddress' is defined but never used.","'getLockedSaleAddress' is defined but never used.","'Web3' is defined but never used.","'pid' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'Link' is defined but never used.","'Image' is defined but never used.","'ExpandableSectionButton' is defined but never used.","'FlexLayout' is defined but never used.","'QuoteToken' is defined but never used.","'getRbsTokenAddress' is defined but never used.","'getWbnbAddress' is defined but never used.","'useRbs' is defined but never used.","'UnlockButton' is defined but never used.","'ClaimButton' is defined but never used.","'farmsProps' is defined but never used.","'ethereum' is assigned a value but never used.","'showExpandableSection' is assigned a value but never used.","'setShowExpandableSection' is assigned a value but never used.","'veri' is assigned a value but never used.","'setVeri' is assigned a value but never used.","'tokenamount' is assigned a value but never used.","'contractbalance' is assigned a value but never used.","'approve' is assigned a value but never used.","'setApprove' is assigned a value but never used.","'buytokken' is assigned a value but never used.","'setBuy' is assigned a value but never used.","'pickasset' is assigned a value but never used.","'setContract' is assigned a value but never used.","'setLpPrice' is assigned a value but never used.","'buyTokenWBNB' is assigned a value but never used.","'setBuyTokenWBNB' is assigned a value but never used.","'ClaimExpand' is assigned a value but never used.","'busdbnb' is assigned a value but never used.","'buyWithWBNB' is assigned a value but never used.",["1342"],[],[],[],[],"'title' is defined but never used.","'Socials' is defined but never used.","'TopSocials' is defined but never used.","'FarmStakingCard' is defined but never used.","'CakeStats' is defined but never used.","'TopFarms' is defined but never used.","'TokensCard' is defined but never used.","'Benefits' is defined but never used.","'Partners' is defined but never used.","'LaunchPools' is defined but never used.","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'FarmTabButtons' is defined but never used.","'DelegateFarms' is defined but never used.","'TranslateString' is assigned a value but never used.","'bnbPrice' is assigned a value but never used.","'Heading' is defined but never used.","'Coming' is defined but never used.","'stakingTokenPriceInBNB' is assigned a value but never used.","'totalRewardPricePerYear' is assigned a value but never used.","'totalStaked' is defined but never used.","'Hero' is assigned a value but never used.","'Text' is defined but never used.","'Button' is defined but never used.","'LinkExternal' is defined but never used.","'Flex' is defined but never used.","'Title' is defined but never used.","'LaunchIfoCallout' is assigned a value but never used.","'List' is assigned a value but never used.","'add' is defined but never used.","'address' is defined but never used.","'Label' is defined but never used.","'useSousApprove' is defined but never used.","'useSousStake' is defined but never used.","'CompoundModal' is defined but never used.","'OldSyrupTitle' is defined but never used.","'totalStaked' is assigned a value but never used.","'earningEther' is assigned a value but never used.","'BalanceAndCompound' is assigned a value but never used.","'BackgroundImage' is defined but never used.","'communityFarms' is defined but never used.","'FCardSolo' is assigned a value but never used.",["1342"],[],[],[],[],"'CardValue' is defined but never used.","'getBalanceNumber' is defined but never used.","'useTotalSupply' is defined but never used.","'useBurnedBalance' is defined but never used.","'useCustomTokenBalance' is defined but never used.","'BLOCKS_PER_YEAR' is defined but never used.","'getCakeAddress' is defined but never used.","'useFarms' is defined but never used.","'usePriceCakeBusd' is defined but never used.","'useTotalValue' is defined but never used.","'usePriceBnbBusd' is defined but never used.","'addToMetamask' is assigned a value but never used.","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","'TokenInput' is defined but never used.","'useCallback' is defined but never used.","'Slider' is defined but never used.","'sliderSettings' is assigned a value but never used.","'partners' is assigned a value but never used.",["1342"],[],[],[],[],"'CardBody' is defined but never used.","'useAllHarvest' is defined but never used.","'CakeHarvestBalance' is defined but never used.","'CakeWalletBalance' is defined but never used.","'StyledFarmStakingCard' is assigned a value but never used.","'Block' is assigned a value but never used.","'CardImage' is assigned a value but never used.","'Label' is assigned a value but never used.","'Actions' is assigned a value but never used.","'pendingTx' is assigned a value but never used.","'setPendingTx' is assigned a value but never used.","'cakeBalance' is assigned a value but never used.","'eggPrice' is assigned a value but never used.","'earningsSum' is assigned a value but never used.","'balancesWithValue' is assigned a value but never used.",["1342"],[],[],[],[],"'fetchPoolsBlockLimits' is defined but never used.","'TokenLink' is assigned a value but never used.","'projectLink' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'getBasePoint' is defined but never used.","'getContract' is defined but never used.","'useFarmFromPid' is defined but never used.","'useFarmUser' is defined but never used.","'useApprove' is defined but never used.","'StakeAction' is defined but never used.","'fetchDelegateUserStaked' is defined but never used.","'ethereum' is defined but never used.","'sync' is assigned a value but never used.","'setSync' is assigned a value but never used.","'earning' is assigned a value but never used.","prefer-destructuring","Use object destructuring.","VariableDeclarator","preferDestructuring",{"range":"1343","text":"1344"},{"range":"1345","text":"1346"},"'data' is assigned a value but never used.",{"range":"1347","text":"1348"},{"range":"1349","text":"1350"},"'renderApprovalOrStakeButton' is assigned a value but never used.","'account' is defined but never used.","'cakeABI' is defined but never used.","'wbnbABI' is defined but never used.","'bnbPool' is assigned a value but never used.","'createSlice' is defined but never used.","'reject' is defined but never used.","'farm' is defined but never used.","'getWeb3' is defined but never used.","'useStake' is defined but never used.","'harvest' is defined but never used.","'contract' is assigned a value but never used.","'delegateFarmContract' is assigned a value but never used.",["1342"],[],[],[],[],"'StyledLinkExternal' is assigned a value but never used.","'isTokenOnly' is defined but never used.","'lpLabel' is defined but never used.","'liquidityUrlPathParts' is assigned a value but never used.","'NoFeeTag' is defined but never used.","'depositFee' is defined but never used.","'Divider' is defined but never used.","'removed' is defined but never used.","'totalValueFormated' is assigned a value but never used.",["1342"],[],[],[],[],"'useTokenBalance' is defined but never used.","'useAllEarnings' is defined but never used.","'useMemo' is defined but never used.","'provider' is defined but never used.","'FarmCardProps' is defined but never used.","'marketCap' is assigned a value but never used.","'cakePriceUsd' is assigned a value but never used.","'farms' is assigned a value but never used.","'cakeSupply' is assigned a value but never used.","'useDispatch' is defined but never used.","'useWallet' is defined but never used.","'useRefresh' is defined but never used.","'fetchFarmUserDataAsync' is defined but never used.","'FarmWithStakedValue' is defined but never used.","'TopFarmCard' is defined but never used.","'FarmingCard' is defined but never used.","'topAPY' is assigned a value but never used.","'Toggle' is defined but never used.","'claimedOnly' is defined but never used.","'setClaimedOnly' is defined but never used.","'ToggleWrapper' is assigned a value but never used.","'ethers' is defined but never used.","'stakersDesc' is assigned a value but never used.","'Chart' is defined but never used.","'IconContainer' is assigned a value but never used.","'ChartAreaContainer' is assigned a value but never used.","'available' is defined but never used.","'onPresentChart' is assigned a value but never used.","'decimalsToRound' is assigned a value but never used.","'MANUAL_POOL_AUTO_COMPOUND_FREQUENCY' is assigned a value but never used.","'tokenTaxRate' is defined but never used.","'currentValue' is defined but never used.","'getIntroOfPage' is assigned a value but never used.","'label' is defined but never used.","padding-line-between-statements",[3290,3314],"{message} = result",[3328,3346],"{data} = result",[3360,3384],"{success} = result",[3492,3523],"{username} = result.data"]